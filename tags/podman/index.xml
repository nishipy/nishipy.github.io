<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>podman on /home/nishipy</title><link>https://blog.nishipy.com/tags/podman/</link><description>Recent content in podman on /home/nishipy</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 10 Sep 2024 00:00:00 +0900</lastBuildDate><atom:link href="https://blog.nishipy.com/tags/podman/index.xml" rel="self" type="application/rss+xml"/><item><title>oc-mirror v2で遊んでみた</title><link>https://blog.nishipy.com/p/oc-mirror-v2-image-deletion/</link><pubDate>Tue, 10 Sep 2024 00:00:00 +0900</pubDate><guid>https://blog.nishipy.com/p/oc-mirror-v2-image-deletion/</guid><description>&lt;img src="https://blog.nishipy.com/p/oc-mirror-v2-image-deletion/mirror.jpg" alt="Featured image of post oc-mirror v2で遊んでみた" />&lt;p>Header Photo by &lt;a class="link" href="https://unsplash.com/ja/@ivrn" target="_blank" rel="noopener"
>Ivan Rohovchenko&lt;/a> on &lt;a class="link" href="https://unsplash.com/photos/black-telescope-during-day-time-8SjeH5pZbjw" target="_blank" rel="noopener"
>Unsplash&lt;/a>&lt;/p>
&lt;h2 id="oc-mirror-plugin-v2">oc-mirror plugin v2&lt;/h2>
&lt;p>インターネット接続性のない環境では、OpenShiftのインストールに必要なコンテナイメージやOperatorが使うコンテナイメージを、Red Hatが公開するインターネット上のコンテナレジストリからミラーレジストリにミラーリングする必要があります。そんなときに便利なoc-mirror pluginですが、バグの多いの機能の改善や再実装、新機能の追加をした&lt;a class="link" href="https://github.com/openshift/oc-mirror/tree/main/v2" target="_blank" rel="noopener"
>oc-mirror plugin v2&lt;/a>の開発が進められています。詳細は、&lt;a class="link" href="https://docs.openshift.com/container-platform/4.16/release_notes/ocp-4-16-release-notes.html#ocp-4-16-oc-mirror-v2_release-notes" target="_blank" rel="noopener"
>OpenShift 4.16のリリースノートのこの辺り&lt;/a>をご確認ください。&lt;/p>
&lt;p>なお、&lt;a class="link" href="https://docs.openshift.com/container-platform/4.16/installing/disconnected_install/about-installing-oc-mirror-v2.html" target="_blank" rel="noopener"
>OpenShift 4.16時点では、oc-mirror plugin v2によるミラーリングはTech Preview&lt;/a>です。&lt;/p>
&lt;p>今回は、oc-mirror plugin v2で追加された、ミラーレジストリ上にあるイメージ削除の機能で遊んでみたいと思います。&lt;/p>
&lt;h2 id="oc-mirror-pluginによるミラーリングとイメージ削除">oc-mirror pluginによるミラーリングとイメージ削除&lt;/h2>
&lt;p>従来のoc-mirror v1では、ミラーリング実行時に、前回までのミラーリングの履歴から自動でイメージをプルーニングするため、利用者が明示的にイメージを削除することはありませんでした。
この挙動は一見便利そうですが、&lt;code>ImageSetConfiguration&lt;/code> という設定ファイルをわりと作成・更新しないと意図しないイメージを消してしまうこともしばしばありました。またバグが報告されることも多かったそうで、oc-mirror plugin v2では、自動でプルーニングを行わないように根本的に実装が見直されています。&lt;/p>
&lt;h3 id="deleteimagesetconfiguration-の導入">&lt;code>DeleteImageSetConfiguration&lt;/code> の導入&lt;/h3>
&lt;p>oc-mirror では、&lt;code>ImageSetConfiguration&lt;/code> という設定ファイルにミラーリング対象のコンテナイメージを定義していました。v1では、このファイルの変更履歴から削除対象となるイメージを自動で算出していたわけですが、v2からは &lt;code>DeleteImageSetConfiguration&lt;/code> が導入され、&lt;code>ImageSetConfiguration&lt;/code> と同じような書式で削除したいイメージを明示的に定義することができます。&lt;/p>
&lt;h2 id="oc-mirror-v2でイメージ削除してみる">oc-mirror v2でイメージ削除してみる&lt;/h2>
&lt;h3 id="イメージのミラーリング">イメージのミラーリング&lt;/h3>
&lt;p>ミラーレジストリからイメージを削除してみたいのですが、そもそも消すイメージがないので、まずミラーリングを実行します。以下のような内容の &lt;code>ImageSetConfiguration&lt;/code> で、OpenShift 4.16.5 と 4.16.6のリリースイメージをミラーリングしてみます。v1と比較して、CRD(のようなもの)の&lt;code>kind&lt;/code>は同じですが、&lt;code>apiVersion&lt;/code> が異なるため注意してください。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ImageSetConfiguration&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mirror.openshift.io/v2alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">mirror&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">platform&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">channels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">stable-4.16&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">minVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">4.16.5&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">maxVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">4.16.6&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>なお、ミラーレジストリには、&lt;a class="link" href="https://docs.openshift.com/container-platform/4.16/installing/disconnected_install/installing-mirroring-creating-registry.html" target="_blank" rel="noopener"
>Mirror registry for Red Hat OpenShift&lt;/a>を使うのが簡単です。OpenShiftインストールのためのミラーリング用途限定で、PodmanでRed Hat Quayをデプロイしてくれます。この記事ではミラーレジストリの構築は省略します。&lt;/p>
&lt;p>ミラーレジストリへログイン後、ミラーリングを実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ podman login registry.ocp4.tanishim.local:8443 -u init --authfile mirror-pull-secret.txt
Password:
Login Succeeded!
$ oc mirror --v2 --authfile mirror-pull-secret.txt -c ./imagesetconfig.yaml --workspace file://./v2-workspace docker://registry.ocp4.tanishim.local:8443
...
2024/09/04 16:14:01 [INFO] : _ setting up the environment for you...
2024/09/04 16:14:01 [INFO] : __ workflow mode: mirrorToMirror
2024/09/04 16:14:01 [INFO] : _ going to discover the necessary images...
2024/09/04 16:14:01 [INFO] : __ collecting release images...
2024/09/04 16:14:02 [INFO] : __ collecting operator images...
2024/09/04 16:14:02 [INFO] : __ collecting additional images...
2024/09/04 16:14:02 [INFO] : __ Start copying the images...
2024/09/04 16:14:05 [INFO] : === Overall Progress - image 1 / 384 ===
2024/09/04 16:14:05 [INFO] : release image 1 / 384
2024/09/04 16:14:05 [INFO] : image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:5bb98edf376dfa838ce6899b0fc0e867237f34df63e8bf476d0ba9d2195131bd
2024/09/04 16:14:05 [INFO] : =========================================
2024/09/04 16:14:07 [INFO] : === Overall Progress - image 2 / 384 ===
2024/09/04 16:14:07 [INFO] : release image 2 / 384
2024/09/04 16:14:07 [INFO] : image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:6a8a7825b2039759548c6d83db384979cf4bf0a17d231c2a588c57e80623f74c
2024/09/04 16:14:07 [INFO] : =========================================
2024/09/04 16:14:15 [INFO] : === Overall Progress - image 3 / 384 ===
2024/09/04 16:14:15 [INFO] : release image 3 / 384
2024/09/04 16:14:15 [INFO] : image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:667efccd05c2154ebda8ae7a14fbb3ed4523ad8c1f459df9eda77a041239ae1c
2024/09/04 16:14:15 [INFO] : =========================================
2024/09/04 16:14:19 [INFO] : === Overall Progress - image 4 / 384 ===
2024/09/04 16:14:19 [INFO] : release image 4 / 384
2024/09/04 16:14:19 [INFO] : image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:355407f1b51db63278a581de341542521972e68c607a0e10f521733795619214
2024/09/04 16:14:19 [INFO] : =========================================
2024/09/04 16:14:26 [INFO] : === Overall Progress - image 5 / 384 ===
2024/09/04 16:14:26 [INFO] : release image 5 / 384
2024/09/04 16:14:26 [INFO] : image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:041d983c6807129d0e0cf371133f8a1c0d5fde78a813c60aa1f293e64004fb43
2024/09/04 16:14:26 [INFO] : =========================================
__2024/09/04 16:14:31 [INFO] : === Overall Progress - image 6 / 384 ===
2024/09/04 16:14:31 [INFO] : release image 6 / 384
...
2024/09/04 17:58:09 [INFO] : === Overall Progress - image 384 / 384 ===
2024/09/04 17:58:09 [INFO] : release image 384 / 384
2024/09/04 17:58:09 [INFO] : image: quay.io/openshift-release-dev/ocp-release:4.16.5-x86_64
2024/09/04 17:58:09 [INFO] : ===========================================
2024/09/04 17:58:09 [INFO] : === Results ===
2024/09/04 17:58:09 [INFO] : All release images mirrored successfully 384 / 384 __
2024/09/04 17:58:09 [INFO] : __ Generating IDMS file...
2024/09/04 17:58:09 [INFO] : v2-workspace/working-dir/cluster-resources/idms-oc-mirror.yaml file created
2024/09/04 17:58:09 [INFO] : __ Generating ITMS file...
2024/09/04 17:58:09 [INFO] : v2-workspace/working-dir/cluster-resources/itms-oc-mirror.yaml file created
2024/09/04 17:58:09 [INFO] : __ No catalogs mirrored. Skipping CatalogSource file generation.
2024/09/04 17:58:09 [INFO] : mirror time : 1h44m7.951974594s
2024/09/04 17:58:09 [INFO] : __ Goodbye, thank you for using oc-mirror
&lt;/code>&lt;/pre>&lt;p>oc-mirrorを使ったことがある方ならわかると思いますが、標準出力されるログの見やすさが桁違いです。プログレスバーのように、ミラーリングの進捗がわかりやすいですし、タイムスタンプも有用です。
&lt;code>--workspace&lt;/code> というフラグはoc-mirror v2で追加された便利機能の1つです。指定したディレクトリに、こんな感じでアーティファクトが生成されていました。ログやミラーしたOperator、OpenShift リリースの情報、インストール後クラスタに適用する &lt;code>ImageDigestMirrorSet&lt;/code> および &lt;code>ImageTagMirrorSet&lt;/code> のYAMLマニフェストが入ります&lt;/p>
&lt;pre tabindex="0">&lt;code>$ tree v2-workspace/ -d
v2-workspace/
`-- working-dir
|-- cluster-resources
|-- hold-operator
|-- hold-release
| `-- ocp-release
| |-- 4.16.5-x86_64
| | `-- release-manifests
| `-- 4.16.6-x86_64
| `-- release-manifests
|-- info
|-- logs
|-- release-filters
|-- release-images
| `-- ocp-release
| |-- 4.16.5-x86_64
| | `-- blobs
| | `-- sha256
| `-- 4.16.6-x86_64
| `-- blobs
| `-- sha256
`-- signatures
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>$ cat v2-workspace/working-dir/cluster-resources/*.yaml
---
apiVersion: config.openshift.io/v1
kind: ImageDigestMirrorSet
metadata:
name: idms-release-0
spec:
imageDigestMirrors:
- mirrors:
- registry.ocp4.tanishim.local:8443/openshift-release-dev
source: quay.io/openshift-release-dev
status: {}
---
apiVersion: config.openshift.io/v1
kind: ImageTagMirrorSet
metadata:
name: itms-release-0
spec:
imageTagMirrors:
- mirrors:
- registry.ocp4.tanishim.local:8443/openshift-release-dev
source: quay.io/openshift-release-dev
status: {}
&lt;/code>&lt;/pre>&lt;p>Mirror Registry側を念の為確認すると、今回ミラーリングしたOCP 4.16.5と4.16.6 のリリースイメージが入っています。&lt;/p>
&lt;p>&lt;img src="https://blog.nishipy.com/p/oc-mirror-v2-image-deletion/tag_history_1.jpg"
width="2602"
height="1068"
srcset="https://blog.nishipy.com/p/oc-mirror-v2-image-deletion/tag_history_1_hu0533df8c600b6ebf5e775c57536fef00_178874_480x0_resize_q75_box.jpg 480w, https://blog.nishipy.com/p/oc-mirror-v2-image-deletion/tag_history_1_hu0533df8c600b6ebf5e775c57536fef00_178874_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="243"
data-flex-basis="584px"
>&lt;/p>
&lt;h3 id="deleteimagesetconfiguration-によるイメージの削除">&lt;code>DeleteImageSetConfiguration&lt;/code> によるイメージの削除&lt;/h3>
&lt;p>いよいよ本題です。4.16.5用のイメージだけを削除してみます。以下の内容で作成した &lt;code>DeleteImageSetConfiguration&lt;/code> と先ほどミラーリングした際に生成されたメタデータを読み込んで、イメージ削除に必要な設定ファイルを生成します。&lt;code>oc mirror delete&lt;/code> コマンドに &lt;code>--generate&lt;/code> フラグをつけるという、なんともややこしい感じです。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">mirror.openshift.io/v2alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DeleteImageSetConfiguration&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">delete&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">platform&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">channels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">stable-4.16&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">minVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">4.16.5&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">maxVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">4.16.5&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;pre tabindex="0">&lt;code>$ oc mirror --v2 delete --generate --authfile mirror-pull-secret.txt --config deleteimagesetconfig.yaml --workspace file://./v2-workspace docker://registry.ocp4.tanishim.local:8443
2024/09/05 15:48:04 [WARN] : _ --v2 flag identified, flow redirected to the oc-mirror v2 version. This is Tech Preview, it is still under development and it is not production ready.
2024/09/05 15:48:04 [INFO] : __ Hello, welcome to oc-mirror
2024/09/05 15:48:04 [INFO] : _ setting up the environment for you...
2024/09/05 15:48:04 [INFO] : __ workflow mode: mirrorToMirror / delete
2024/09/05 15:48:04 [INFO] : _ going to discover the necessary images...
2024/09/05 15:48:04 [INFO] : __ collecting release images...
2024/09/05 15:48:04 [INFO] : __ collecting operator images...
2024/09/05 15:48:04 [INFO] : __ collecting additional images...
2024/09/05 15:48:04 [INFO] : __ Generating delete file...
2024/09/05 15:48:04 [INFO] : v2-workspace/working-dir/delete file created
v2-workspace/working-dir/delete2024/09/05 15:49:31 [INFO] : delete time : 1m26.960963111s
2024/09/05 15:49:31 [INFO] : __ Goodbye, thank you for using oc-mirror
&lt;/code>&lt;/pre>&lt;p>&lt;code>v2-workspace/working-dir/delete&lt;/code> に何か作ってくれたようです。見てみましょう。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls v2-workspace/working-dir/delete
delete-images.yaml delete-imageset-config.yaml
$ cat v2-workspace/working-dir/delete/delete-imageset-config.yaml
apiVersion: mirror.openshift.io/v2alpha1
delete:
helm: {}
platform:
architectures:
- amd64
channels:
- maxVersion: 4.16.5
minVersion: 4.16.5
name: stable-4.16
type: ocp
kind: DeleteImageSetConfiguration
$ cat v2-workspace/working-dir/delete/delete-images.yaml
...
- imageName: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:ffeb6edc9f09e75011c3547b2149b8120c68e7721d8ba2e7a6d659e6c83229bc
imageReference: docker://registry.ocp4.tanishim.local:8443/openshift-release-dev/ocp-v4.0-art-dev@sha256:ffeb6edc9f09e75011c3547b2149b8120c68e7721d8ba2e7a6d659e6c83229bc
relatedBlobs:
- sha256:86592d87dea5f0c55992dc4aadd236cde96f5e4f3d3dfd0456ca38dca2d2e151
- sha256:9a0e86afac7b17960e2411a55e234d639aead65defac982719003eaa242da807
- sha256:b958cf13e572cbd92209b5c01a8e65203cf88c4b017258ec8ff9bfd5d722b715
- sha256:ca1636478fe5b8e2a56600e24d6759147feb15020824334f4a798c1cb6ed58e2
- sha256:e5e8178c6af6b5832361eb52e25232f851a6979c63bbad694e063afdd71ca459
- sha256:ffeb6edc9f09e75011c3547b2149b8120c68e7721d8ba2e7a6d659e6c83229bc
kind: DeleteImageList
&lt;/code>&lt;/pre>&lt;p>&lt;code>DeleteImageSetConfiguration&lt;/code> と &lt;code>DeleteImageList&lt;/code> のマニフェストが作成されています。前者は先ほど自分で与えたファイルと同じ内容です。後者は、それを元に実際に削除対象となるイメージとダイジェストをリストにしたもののようです。この段階ではイメージの削除は行われていません。先ほど生成された &lt;code>DeleteImageList&lt;/code> のYAMLファイル &lt;code>delete-images.yaml&lt;/code>を使って削除処理を実行します。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ oc mirror --v2 delete --authfile mirror-pull-secret.txt --delete-yaml-file ./v2-workspace/working-dir/delete/delete-images.yaml docker://registry.ocp4.tanishim.local:8443
...
2024/09/05 16:01:03 [INFO] : image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:ffbe0d4c61d5a2e42923b1d063179bbd99fe2bf7a679c5a2f1ae444ba0d5d6c6
2024/09/05 16:01:03 [INFO] : ===========================================
2024/09/05 16:01:03 [INFO] : === Overall Progress - image 192 / 192 ===
2024/09/05 16:01:03 [INFO] : image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:ffeb6edc9f09e75011c3547b2149b8120c68e7721d8ba2e7a6d659e6c83229bc
2024/09/05 16:01:03 [INFO] : ===========================================
2024/09/05 16:01:03 [INFO] : === Results ===
2024/09/05 16:01:03 [INFO] : All images deleted successfully 192 / 192 __
2024/09/05 16:01:03 [INFO] : delete time : 1m33.308334555s
2024/09/05 16:01:03 [INFO] : __ Remember to execute a garbage collect (or similar) on your remote repository
2024/09/05 16:01:03 [INFO] : __ Goodbye, thank you for using oc-mirror
&lt;/code>&lt;/pre>&lt;p>完了後、ミラーレジストリを見てみると、期待した通り、4.16.5のリリースイメージ(のタグ)だけが削除されたことが確認できます。&lt;/p>
&lt;p>&lt;img src="https://blog.nishipy.com/p/oc-mirror-v2-image-deletion/tag-history-2.jpg"
width="2542"
height="844"
srcset="https://blog.nishipy.com/p/oc-mirror-v2-image-deletion/tag-history-2_hu0533df8c600b6ebf5e775c57536fef00_127757_480x0_resize_q75_box.jpg 480w, https://blog.nishipy.com/p/oc-mirror-v2-image-deletion/tag-history-2_hu0533df8c600b6ebf5e775c57536fef00_127757_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="301"
data-flex-basis="722px"
>&lt;/p>
&lt;p>&lt;img src="https://blog.nishipy.com/p/oc-mirror-v2-image-deletion/tag-history-3.jpg"
width="2684"
height="1204"
srcset="https://blog.nishipy.com/p/oc-mirror-v2-image-deletion/tag-history-3_hu0533df8c600b6ebf5e775c57536fef00_216348_480x0_resize_q75_box.jpg 480w, https://blog.nishipy.com/p/oc-mirror-v2-image-deletion/tag-history-3_hu0533df8c600b6ebf5e775c57536fef00_216348_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="222"
data-flex-basis="535px"
>&lt;/p>
&lt;h2 id="余談">余談&lt;/h2>
&lt;h3 id="oc-mirror-v2のイメージ削除の注意点">oc-mirror v2のイメージ削除の注意点&lt;/h3>
&lt;p>oc-mirror v2の新機能である &lt;code>DeleteImageSetConfiguration&lt;/code> によるイメージ削除では、イメージのマニフェストのみを削除しています。そのため、ストレージの使用量は減りません。不要なイメージの実体を削除し、ストレージを空けたい場合は、コンテナレジストリ側でガーベージコレクションを有効にしてください。なお、&lt;a class="link" href="https://docs.redhat.com/en/documentation/red_hat_quay/3/html/manage_red_hat_quay/garbage-collection#garbage-collection-configuration-fields" target="_blank" rel="noopener"
>Red Hat Quay では、ガーベージコレクションはデフォルトで有効&lt;/a>になっています。今回使ったOpenShift Mirror Registryも中身はQuayなので同様です。&lt;/p>
&lt;h3 id="oc-mirror-on-rhel-8">oc-mirror on RHEL 8&lt;/h3>
&lt;p>最近のバージョンのoc-mirrorをRHEL 8で実行しようとすると、以下のようなエラーが出るかもしれません。&lt;/p>
&lt;pre tabindex="0">&lt;code>/lib64/libc.so.6: version `GLIBC_2.33&amp;#39; not found
&lt;/code>&lt;/pre>&lt;p>RHEL 8の&lt;code>glibc&lt;/code> のバージョンが、&lt;code>glibc-2.28&lt;/code> であるためです。このような場合、RHEL 8のマシンでUBI 9なPodmanコンテナで一時対処する方法があります。以下のようにコンテナを実行し、bashセッションを起動して、oc-mirrorを試せばよいでしょう。必要であれば、ホストOS上にあるミラーレジストリのプルシークレットやCA証明書をコピーします。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ podman run -dt -v ./:/oc-mirror:Z --name ubi9 registry.redhat.io/ubi9
$ podman exec -it ubi9 /bin/bash
&lt;/code>&lt;/pre></description></item><item><title>Quadletイン・アクション</title><link>https://blog.nishipy.com/p/podman-quadlet/</link><pubDate>Sun, 17 Dec 2023 00:00:00 +0900</pubDate><guid>https://blog.nishipy.com/p/podman-quadlet/</guid><description>&lt;img src="https://blog.nishipy.com/p/podman-quadlet/seal.jpg" alt="Featured image of post Quadletイン・アクション" />&lt;p>Header Photo by &lt;a class="link" href="https://unsplash.com/@amyannaasher?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash" target="_blank" rel="noopener"
>Amy Asher&lt;/a> on &lt;a class="link" href="https://unsplash.com/photos/white-seal-on-soil-giZJHm2m9yY?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash" target="_blank" rel="noopener"
>Unsplash&lt;/a>&lt;/p>
&lt;h2 id="-はじめに">🦭 はじめに&lt;/h2>
&lt;p>&lt;a class="link" href="https://qiita.com/advent-calendar/2023/redhat" target="_blank" rel="noopener"
>Red Hat Advent Calendar 2023&lt;/a> 17日目の記事🎅です。
ちなみにすべて &lt;a class="link" href="https://xn--u9jy52g42am02luma.jp/" target="_blank" rel="noopener"
>個人の見解&lt;/a> です。&lt;/p>
&lt;h2 id="-podman-generate-systemd-の非推奨化と-quadlet">🦭 &lt;code>podman generate systemd&lt;/code> の非推奨化と Quadlet&lt;/h2>
&lt;p>エッジ等のユースケースで、systemdのサービスユニットとしてPodmanコンテナやPodを制御したい場合、従来は &lt;a class="link" href="https://docs.podman.io/en/latest/markdown/podman-generate-systemd.1.html" target="_blank" rel="noopener"
>&lt;code>podman generate systemd&lt;/code>&lt;/a> というコマンドを使って、既存のコンテナやPodからユニットファイルを生成していました。2023年9月に発売された書籍&lt;a class="link" href="https://www.shuwasystem.co.jp/book/9784798070209.html" target="_blank" rel="noopener"
>Podmanイン・アクション&lt;/a>(&lt;a class="link" href="https://www.manning.com/books/podman-in-action" target="_blank" rel="noopener"
>Podman in Action&lt;/a>をFedora 38/Podman v4.5.1を前提に日本語訳したもの) の「7章 systemdとの統合」でも、この方法を紹介しています。&lt;/p>
&lt;p>&lt;img src="https://blog.nishipy.com/p/podman-quadlet/podman-in-action-jp.jpeg"
width="1280"
height="1280"
srcset="https://blog.nishipy.com/p/podman-quadlet/podman-in-action-jp_huf0e52eaf7cb6a386b59d8a70974dacf5_486848_480x0_resize_q75_box.jpeg 480w, https://blog.nishipy.com/p/podman-quadlet/podman-in-action-jp_huf0e52eaf7cb6a386b59d8a70974dacf5_486848_1024x0_resize_q75_box.jpeg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>Podman v4.7.0 で、この &lt;a class="link" href="https://docs.podman.io/en/latest/markdown/podman-generate-systemd.1.html" target="_blank" rel="noopener"
>`podman generate systemd&lt;/a> はdeprecated(非推奨)となりました。systemdのもとでPodmanコンテナやPodを実行したい場合は、&lt;a class="link" href="https://github.com/containers/podman/releases/tag/v4.7.0" target="_blank" rel="noopener"
>Podman v4.7.0 のリリースノート&lt;/a>に記載がある通り、&lt;a class="link" href="https://docs.podman.io/en/latest/markdown/podman-systemd.unit.5.html" target="_blank" rel="noopener"
>Quadlet&lt;/a> を使うことが推奨されています。以下の記載があります。&lt;/p>
&lt;blockquote>
&lt;p>The podman generate systemd command is deprecated. Use Quadlet for running containers and pods under systemd.&lt;/p>
&lt;/blockquote>
&lt;h2 id="-quadletを完全に理解する">🦭 Quadletを完全に理解する&lt;/h2>
&lt;h3 id="quadletとpodman">QuadletとPodman&lt;/h3>
&lt;p>&lt;a class="link" href="https://docs.podman.io/en/latest/markdown/podman-systemd.unit.5.html" target="_blank" rel="noopener"
>Quadlet&lt;/a>は、PodmanコンテナやPodをsystemdのもとでいい感じに実行できるようにするためのツールであり、もともとPodmanとは別のリポジトリ &lt;a class="link" href="https://github.com/containers/quadlet" target="_blank" rel="noopener"
>containers/quadlet&lt;/a> で開発されていました。その後Podman v4.4で &lt;a class="link" href="https://github.com/containers/podman/tree/main" target="_blank" rel="noopener"
>containers/podman&lt;/a> 内の &lt;a class="link" href="https://github.com/containers/podman/tree/main/pkg/systemd/quadlet" target="_blank" rel="noopener"
>pkg/systemd&lt;/a> の下にマージされています。&lt;a class="link" href="https://github.com/containers/podman/releases/tag/v4.4.0" target="_blank" rel="noopener"
>Podman v4.4.0 のリリースノート&lt;/a>には以下の記載があります。&lt;/p>
&lt;blockquote>
&lt;p>Introduce Quadlet, a new systemd-generator that easily writes and maintains systemd services using Podman.&lt;/p>
&lt;/blockquote>
&lt;h3 id="quadletはsystemdのgenerator">Quadletはsystemdのgenerator&lt;/h3>
&lt;p>そもそもQuadletとは何なんでしょうか。Quadletの作者であるAlexander Larssonさんのブログ&lt;a class="link" href="https://blogs.gnome.org/alexl/?s=quadlet" target="_blank" rel="noopener"
>&lt;code>Quadlet, an easier way to run system containers&lt;/code>&lt;/a>には、以下のように書かれています。また、&lt;a class="link" href="https://docs.podman.io/en/latest/markdown/podman-systemd.unit.5.html" target="_blank" rel="noopener"
>&lt;code>podman-systemd.unit&lt;/code> のドキュメント&lt;/a>もあわせて参照してださい。&lt;/p>
&lt;blockquote>
&lt;p>Quadlet is a systemd generator that takes a container description and automatically generates a systemd service file from it.&lt;/p>
&lt;/blockquote>
&lt;p>つまるところ、Quadletはsystemdのgeneratorの１つです。generatorについては、&lt;a class="link" href="https://www.freedesktop.org/software/systemd/man/latest/systemd.generator.html" target="_blank" rel="noopener"
>&lt;code>systemd.generator(7)&lt;/code>&lt;/a>のman pageに詳しく説明されています。ChatGPTくんに頼んで要約してもらいましょう。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>(ChatGPTくん🤖):&lt;/strong> ジェネレータは、systemdの一部で、システムの起動時や設定再読み込み時に実行され、ユニットファイルがロードされる前に動的にユニットファイルやシンボリックリンクを生成する役割を持つ。ジェネレータは、特定のディレクトリに配置され、システム設定を拡張・上書きし、ユニットファイルの階層を拡張する。優先度の違うディレクトリに出力し、systemctl daemon-reloadで前の設定を消去し、ジェネレータを再実行してsystemdがユニットを再読み込む。&lt;/p>
&lt;/blockquote>
&lt;p>わかった気になれたところで、&lt;a class="link" href="https://www.freedesktop.org/software/systemd/man/latest/systemd.generator.html#Examples" target="_blank" rel="noopener"
>man pageのExamples&lt;/a>を見てみましょう。ここでは最も馴染み深いであろう &lt;code>Example 1. systemd-fstab-generator&lt;/code> を取り上げます。Quadletと同じくgeneratorの1つである &lt;a class="link" href="https://www.freedesktop.org/software/systemd/man/latest/systemd-fstab-generator.html#" target="_blank" rel="noopener"
>&lt;code>systemd-fstab-generator&lt;/code>&lt;/a> が、&lt;code>/etc/fstab&lt;/code> の内容をもとにユニットファイルを生成してくれています。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Example 1. systemd-fstab-generator&lt;/strong>&lt;/p>
&lt;p>systemd-fstab-generator(8) converts /etc/fstab into native mount units. It uses argv[1] as location to place the generated unit files in order to allow the user to override /etc/fstab with their own native unit files, but also to ensure that /etc/fstab overrides any vendor default from /usr/.&lt;/p>
&lt;p>After editing /etc/fstab, the user should invoke systemctl daemon-reload. This will re-run all generators and cause systemd to reload units from disk. To actually mount new directories added to fstab, systemctl start /path/to/mountpoint or systemctl start local-fs.target may be used.&lt;/p>
&lt;/blockquote>
&lt;p>Quadletに話を戻しましょう。手元のFedora CoreOS 39な環境で、ユーザー用のgeneratorが置かれるディレクトリ &lt;code>/usr/lib/systemd/user-generators/&lt;/code> を覗いてみると、&lt;code>/usr/lib/systemd/user-generators/podman-user-generator&lt;/code> というgeneratorがあります。これは &lt;code>/usr/libexec/podman/quadlet&lt;/code> へのシンボリックリンクになっています。&lt;/p>
&lt;pre tabindex="0">&lt;code>core@fedora-39:~$ cat /etc/redhat-release
Fedora release 39 (Thirty Nine)
core@fedora-39:~$ podman version
Client: Podman Engine
Version: 4.7.2
API Version: 4.7.2
Go Version: go1.21.1
Built: Tue Oct 31 23:30:33 2023
OS/Arch: linux/arm64
ore@fedora-39:~$ ls -l /usr/lib/systemd/user-generators/podman-user-generator
lrwxrwxrwx. 5 root root 31 Nov 21 04:19 /usr/lib/systemd/user-generators/podman-user-generator -&amp;gt; ../../../libexec/podman/quadlet
&lt;/code>&lt;/pre>&lt;p>&lt;code>/usr/libexec/podman/quadlet&lt;/code> は実行可能なバイナリで、&lt;code>podman&lt;/code> パッケージに含まれています。&lt;/p>
&lt;pre tabindex="0">&lt;code>core@fedora-39:~$ file /usr/libexec/podman/quadlet
/usr/libexec/podman/quadlet: ELF 64-bit LSB pie executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, BuildID[sha1]=59f30e7e5606e8c538765862854095113e30a9bb, for GNU/Linux 3.7.0, stripped
core@fedora-39:~$ /usr/libexec/podman/quadlet -h
Usage of /usr/libexec/podman/quadlet:
-dryrun
Run in dryrun mode printing debug information
-no-kmsg-log
Don&amp;#39;t log to kmsg
-user
Run as systemd user
-v Print debug information
-version
Print version information and exit
core@fedora-39:~$ rpm -qf /usr/libexec/podman/quadlet
podman-4.7.2-1.fc39.aarch64
&lt;/code>&lt;/pre>&lt;h3 id="quadlet-ファイルの形式">Quadlet ファイルの形式&lt;/h3>
&lt;p>Quadletがユニットファイルを生成するための元ファイル(以下、Quadletファイルと呼んでみます)の形式については、&lt;a class="link" href="https://docs.podman.io/en/latest/markdown/podman-systemd.unit.5.html" target="_blank" rel="noopener"
>&lt;code>podman-systemd.unit(5)&lt;/code>&lt;/a>に書いてあります。&lt;/p>
&lt;p>Quadletファイルの置き場所は、rootユーザーとrootlessユーザーで異なります。以下のディレクトリのいずれかにおけばいいようです。&lt;/p>
&lt;ul>
&lt;li>rootユーザーの場合:
&lt;ul>
&lt;li>&lt;code>/usr/share/containers/systemd/&lt;/code>&lt;/li>
&lt;li>&lt;code>/etc/containers/systemd/&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>rootlessユーザーの場合:
&lt;ul>
&lt;li>&lt;code>$HOME/.config/containers/systemd/&lt;/code>&lt;/li>
&lt;li>&lt;code>$XDG_CONFIG_HOME/containers/systemd/&lt;/code>&lt;/li>
&lt;li>&lt;code>/etc/containers/systemd/users/$(UID)&lt;/code>&lt;/li>
&lt;li>&lt;code>/etc/containers/systemd/users/&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>例えば、Podmanコンテナを定義するためには、以下のような内容で&lt;code>.container&lt;/code>という拡張子のファイルを作成すればいいようです。systemdのユニットファイルに似た形式ですね。実際、&lt;code>[Service]&lt;/code> と &lt;code>[Install]&lt;/code> という部分はユニットファイルと同じように書けるようです。一方、&lt;code>[Container]&lt;/code> はQuadlet特有ですね。他の例は&lt;a class="link" href="https://docs.podman.io/en/latest/markdown/podman-systemd.unit.5.html#examples" target="_blank" rel="noopener"
>&lt;code>podman-systemd.unit(5)&lt;/code>のExamples&lt;/a>を参照ください。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="k">[Unit]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Description&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">A minimal container&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[Container]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Use the centos image&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Image&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">quay.io/centos/centos:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Use volume and network defined below&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Volume&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">test.volume:/data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Network&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">test.network&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># In the container we just run sleep&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Exec&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">sleep 60&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[Service]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Restart service when sleep finishes&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Restart&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">always&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Extend Timeout to allow time to pull the image&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">TimeoutStartSec&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">900&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ExecStartPre flag and other systemd commands can go here, see systemd.unit(5) man page.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">ExecStartPre&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">/usr/share/mincontainer/setup.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[Install]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Start by default on boot&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">WantedBy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">multi-user.target default.target&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Quadletでは &lt;code>[Container]&lt;/code> 以外にも、&lt;code>[Kube]&lt;/code> や &lt;code>[Volume]&lt;/code>、&lt;code>[Network]&lt;/code>、&lt;code>[Image]&lt;/code> というセクションが定義できるようです。特にKubernetesのYAMLファイルを指定できる &lt;code>[Kube]&lt;/code> は便利そうです。&lt;code>podman kube play&lt;/code> のおかげですね。ちなみに、KubernetesとPodmanの連携についても、&lt;a class="link" href="https://www.shuwasystem.co.jp/book/9784798070209.html" target="_blank" rel="noopener"
>Podmanイン・アクション&lt;/a>の「8章 Kubernetesとの連携」で紹介しています(宣伝)。&lt;/p>
&lt;h2 id="-quadlet-を使ってみる">🦭 Quadlet を使ってみる&lt;/h2>
&lt;p>この章で使うQuadletファイルおよびKubernetes YAMLファイルは、&lt;a class="link" href="https://github.com/nishipy/nishipy.github.io/tree/main/content/post/podman-quadlet/manifests" target="_blank" rel="noopener"
>このブログのGitHubリポジトリ&lt;/a>に置いています。&lt;/p>
&lt;h3 id="containerなquadletファイルの使用">&lt;code>.container&lt;/code>なQuadletファイルの使用&lt;/h3>
&lt;p>Podmanコンテナを実行するために、以下のQuadletファイル &lt;code>podman-hello.container&lt;/code> を作成しました。&lt;code>oneshot&lt;/code> で &lt;a class="link" href="https://github.com/containers/PodmanHello/blob/main/podman_hello_world.c" target="_blank" rel="noopener"
>&lt;code>podman_hello_world&lt;/code>&lt;/a> を実行するだけです。rootlessユーザーを使うので、&lt;code>$HOME/.config/containers/systemd/&lt;/code> に置いています。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="k">[Unit]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Description&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">Hello World from Podman&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[Container]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Image&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">quay.io/podman/hello:latest&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Exec&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">/usr/local/bin/podman_hello_world&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[Service]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Restart&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">no&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">oneshot&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">TimeoutStartSec&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">300&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[Install]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">WantedBy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">multi-user.target default.target&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>このQuadletファイルからどのようなユニットファイルが生成されるかは、&lt;code>quadlet -dryrun -user&lt;/code> で確認できます。&lt;/p>
&lt;pre tabindex="0">&lt;code>core@fedora-39:~$ /usr/libexec/podman/quadlet -dryrun -user
quadlet-generator[21202]: Loading source unit file /var/home/core/.config/containers/systemd/podman-hello.container
---podman-hello.service---
[Unit]
Description=Hello World from Podman
SourcePath=/var/home/core/.config/containers/systemd/podman-hello.container
RequiresMountsFor=%t/containers
[X-Container]
Image=quay.io/podman/hello:latest
Exec=/usr/local/bin/podman_hello_world
[Service]
Restart=no
Type=oneshot
TimeoutStartSec=300
Environment=PODMAN_SYSTEMD_UNIT=%n
KillMode=mixed
ExecStop=/usr/bin/podman rm -f -i --cidfile=%t/%N.cid
ExecStopPost=-/usr/bin/podman rm -f -i --cidfile=%t/%N.cid
Delegate=yes
SyslogIdentifier=%N
ExecStart=/usr/bin/podman run --name=systemd-%N --cidfile=%t/%N.cid --replace --rm --cgroups=split quay.io/podman/hello:latest /usr/local/bin/podman_hello_world
[Install]
WantedBy=multi-user.target default.target
&lt;/code>&lt;/pre>&lt;p>&lt;code>.container&lt;/code> なQuadletファイルからユニットファイルを生成するロジックは&lt;a class="link" href="https://github.com/containers/podman/blob/main/pkg/systemd/quadlet/quadlet.go#L398-L402" target="_blank" rel="noopener"
>この辺&lt;/a>に実装されています。とても長いですが、Quadletファイルの &lt;code>[Container]&lt;/code> の下に書かれたパラメータをひたすら変換して、&lt;code>ExecStart=/usr/bin/podman run&lt;/code> の引数に追加していってるのがわかるかと思います。&lt;/p>
&lt;p>さて、Quadletファイルを書いた後 &lt;code>systemctl --user daemon-reload&lt;/code> すると、&lt;code>podman-hello.service&lt;/code> というユニットファイルを生成されます。内容は先程 &lt;code>quadlet -dryrun -user&lt;/code> で確認したものと同じです。&lt;/p>
&lt;pre tabindex="0">&lt;code>core@fedora-39:~$ systemctl --user daemon-reload
core@fedora-39:~$ file /run/user/$UID/systemd/generator/podman-hello.service
/run/user/501/systemd/generator/podman-hello.service: ASCII text
core@fedora-39:~$ file /run/user/$UID/systemd/generator/*/podman-hello.service
/run/user/501/systemd/generator/default.target.wants/podman-hello.service: symbolic link to ../podman-hello.service
/run/user/501/systemd/generator/multi-user.target.wants/podman-hello.service: symbolic link to ../podman-hello.service
&lt;/code>&lt;/pre>&lt;p>このsystemdサービスを起動すると、🦭が挨拶だけしてすぐ帰っていくはずです。&lt;/p>
&lt;pre tabindex="0">&lt;code>core@fedora-39:~$ systemctl --user start podman-hello.service
core@fedora-39:~$ journalctl --user -u podman-hello.service
Dec 11 19:06:34 fedora-39 podman[22326]: 2023-12-11 19:06:34.164871911 +0900 JST m=+0.116574772 container start 3c1197296f89b6f70afb20a6ac01fa53f41f7bca1875578bffb965749984ffac (image=quay.io/podman/hello:latest, name=syst&amp;gt;
Dec 11 19:06:34 fedora-39 podman[22326]: 2023-12-11 19:06:34.165512076 +0900 JST m=+0.117214937 container attach 3c1197296f89b6f70afb20a6ac01fa53f41f7bca1875578bffb965749984ffac (image=quay.io/podman/hello:latest, name=sys&amp;gt;
Dec 11 19:06:34 fedora-39 podman-hello[22326]: !... Hello Podman World ...!
Dec 11 19:06:34 fedora-39 podman-hello[22326]: .--&amp;#34;--.
Dec 11 19:06:34 fedora-39 podman-hello[22326]: / - - \
Dec 11 19:06:34 fedora-39 podman-hello[22326]: / (O) (O) \
Dec 11 19:06:34 fedora-39 podman-hello[22326]: ~~~| -=(,Y,)=- |
Dec 11 19:06:34 fedora-39 podman-hello[22326]: .---. /` \ |~~
Dec 11 19:06:34 fedora-39 podman-hello[22326]: ~/ o o \~~~~.----. ~~
Dec 11 19:06:34 fedora-39 podman-hello[22326]: | =(X)= |~ / (O (O) \
Dec 11 19:06:34 fedora-39 podman-hello[22326]: ~~~~~~~ ~| =(Y_)=- |
Dec 11 19:06:34 fedora-39 podman-hello[22326]: ~~~~ ~~~| U |~~
Dec 11 19:06:34 fedora-39 podman-hello[22326]: Project: https://github.com/containers/podman
Dec 11 19:06:34 fedora-39 podman-hello[22326]: Website: https://podman.io
Dec 11 19:06:34 fedora-39 podman-hello[22326]: Documents: https://docs.podman.io
Dec 11 19:06:34 fedora-39 podman-hello[22326]: Twitter: @Podman_io
Dec 11 19:06:34 fedora-39 podman[22326]: 2023-12-11 19:06:34.1658957 +0900 JST m=+0.117598561 container died 3c1197296f89b6f70afb20a6ac01fa53f41f7bca1875578bffb965749984ffac (image=quay.io/podman/hello:latest, name=systemd&amp;gt;
Dec 11 19:06:34 fedora-39 podman[22399]: 2023-12-11 19:06:34.23270892 +0900 JST m=+0.060999942 container remove 3c1197296f89b6f70afb20a6ac01fa53f41f7bca1875578bffb965749984ffac (image=quay.io/podman/hello:latest, name=syst&amp;gt;
Dec 11 19:06:34 fedora-39 systemd[985]: Finished podman-hello.service - Hello World from Podman.
&lt;/code>&lt;/pre>&lt;h3 id="kubeなquadletファイルの使用">&lt;code>.kube&lt;/code>なQuadletファイルの使用&lt;/h3>
&lt;p>他のQuadletファイルも試してみましょう。&lt;code>.kube&lt;/code> という拡張子のQuadletファイルに &lt;code>[Kube]&lt;/code> セクションを設定すると、&lt;a class="link" href="https://docs.podman.io/en/latest/markdown/podman-kube-play.1.html" target="_blank" rel="noopener"
>&lt;code>podman kube play&lt;/code>&lt;/a> を実行するユニットファイルが生成されます。&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.podman.io/en/latest/markdown/podman-kube-play.1.html" target="_blank" rel="noopener"
>&lt;code>podman kube play&lt;/code>&lt;/a> では、KubernetesなYAMLファイルからPodmanコンテナやPod、Volumeなどを作成することができます。執筆時点で最新のPodman v4.8.0では、以下のKubernetesリソースがサポートされています。&lt;/p>
&lt;ul>
&lt;li>Pod&lt;/li>
&lt;li>Deployment&lt;/li>
&lt;li>PersistentVolumeClaim&lt;/li>
&lt;li>ConfigMap&lt;/li>
&lt;li>Secret&lt;/li>
&lt;li>DaemonSet&lt;/li>
&lt;/ul>
&lt;p>ということで、まずはKubernetes YAMLの準備です。今回は &lt;code>Pod&lt;/code> と &lt;code>ConfigMap&lt;/code> を使いたいので、Kubernetesのドキュメント &lt;a class="link" href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/" target="_blank" rel="noopener"
>Configure a Pod to Use a ConfigMap&lt;/a> に載っている例を拝借します。&lt;/p>
&lt;p>ConfigMapのマニフェストはこれで、&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ConfigMap&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">special-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">special.how&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">very&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">special.type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">charm&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Podはこれです。very charmなPodができそうな予感。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dapi-test-pod&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test-container&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">registry.k8s.io/busybox&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/bin/sh&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;-c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;env&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">envFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">configMapRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">special-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Never&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>準備ができたところで、&lt;code>.kube&lt;/code>なQuadletファイルを書きましょう。&lt;code>[Kube]&lt;/code>のところは、↑のYAMLのパスをそのまま指定すればいいだけでとても楽です。ConfigMapが複数ある場合には、&lt;a class="link" href="https://docs.podman.io/en/latest/markdown/podman-systemd.unit.5.html#configmap" target="_blank" rel="noopener"
>&lt;code>ConfigMap=&lt;/code>&lt;/a>の行を必要な分だけ足していけばいいらしいです。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="k">[Unit]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Description&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">A Service of very charm Pod&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[Kube]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Yaml&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">/tmp/quadlet-in-action/pod-configmap-envFrom.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">ConfigMap&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">/tmp/quadlet-in-action/special-config.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[Service]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Restart&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">no&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">TimeoutStartSec&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">300&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[Install]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">WantedBy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">multi-user.target default.target&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>こんなので動くのか不安なので &lt;code>quadlet -dryrun -user&lt;/code> してみると、ちゃんとユニットファイル変換されました。&lt;code>.container&lt;/code> のときと違って、&lt;code>ExecStart&lt;/code> には &lt;code>podman kube play&lt;/code> が指定されています。&lt;/p>
&lt;pre tabindex="0">&lt;code>core@fedora-39:~$ /usr/libexec/podman/quadlet -dryrun -user ~/.config/containers/systemd/special-pod.kube
...snip...
quadlet-generator[42819]: Loading source unit file /var/home/core/.config/containers/systemd/special-pod.kube
...snip...
---special-pod.service---
[Unit]
Description=A Service of very charm Pod
SourcePath=/var/home/core/.config/containers/systemd/special-pod.kube
RequiresMountsFor=%t/containers
[X-Kube]
Yaml=/tmp/quadlet-in-action/pod-configmap-envFrom.yaml
ConfigMap=/tmp/quadlet-in-action/special-config.yaml
[Service]
Restart=no
Type=notify
TimeoutStartSec=300
KillMode=mixed
Environment=PODMAN_SYSTEMD_UNIT=%n
NotifyAccess=all
SyslogIdentifier=%N
ExecStart=/usr/bin/podman kube play --replace --service-container=true --configmap /tmp/quadlet-in-action/special-config.yaml /tmp/quadlet-in-action/pod-configmap-envFrom.yaml
ExecStopPost=/usr/bin/podman kube down /tmp/quadlet-in-action/pod-configmap-envFrom.yaml
[Install]
WantedBy=multi-user.target default.target
&lt;/code>&lt;/pre>&lt;p>忘れずに &lt;code>systemctl --user daemon-reload&lt;/code> した後、&lt;code>special-pod.service&lt;/code> を起動してみましょう。very charmなコンテナがsystemdサービスとして実行されたことがわかります。&lt;/p>
&lt;pre tabindex="0">&lt;code>core@fedora-39:~$ systemctl --user daemon-reload
core@fedora-39:~$ systemctl --user start special-pod.service
core@fedora-39:~$ journalctl --user -u special-pod.service --grep &amp;#34;special\.&amp;#34;
Dec 12 01:59:06 fedora-39 dapi-test-pod-test-container[327907]: special.type=charm
Dec 12 01:59:06 fedora-39 dapi-test-pod-test-container[327907]: special.how=very
&lt;/code>&lt;/pre>&lt;h2 id="-quadlet-は-podman-generate-systemd-の代替になるのか">🦭 Quadlet は &lt;code>podman-generate-systemd&lt;/code> の代替になるのか？&lt;/h2>
&lt;p>個人的な意見として、&lt;code>podman-generate-systemd&lt;/code> に慣れ親しんだユーザーは、Quadlet が代替と言われるとモヤると思います。というのも、&lt;code>podman-generate-systemd&lt;/code> では既存のコンテナやPodからユニットファイルを生成することができました。一方、Quadlet ファイルは自分で書く必要があり、&lt;code>podman-generate-systemd&lt;/code> のように既存のコンテナやPodからQuadlet ファイルを自動生成する機能はありません。&lt;/p>
&lt;p>この辺りは、&lt;a class="link" href="https://github.com/containers/podman/discussions/20218" target="_blank" rel="noopener"
>containers/podman の Discussion#20218&lt;/a>の通りコミュニティでも議論されています。&lt;code>How to replace the &amp;quot;podman generate systemd&amp;quot; command since its deprecated&lt;/code> という質問に対して、PodmanのMaintainerが投稿した以下のコメントがベストアンサーに選ばれています。&lt;/p>
&lt;blockquote>
&lt;p>I do not want to add that functionality to Podman as the ultimately goal is to move away from the workflow of generating systemd units based on existing containers. With Quadlet we aim at a Compose and K8s-like declarative workflow. Adding podman generate quadlet conflicts with that goal and it would imply that new Quadlet features had to be added there as well.
The current strategy is to deprecate podman generate systemd. That means that no new features will be added to generate systemd but only bug fixes.&lt;/p>
&lt;/blockquote>
&lt;p>このコメントから分かるように、Podmanは最終的には既存のコンテナからユニットファイルを生成する既存のワークフローから脱却して、KubernetesやComposeのような宣言的なワークフローを目指しており、これがPodmanにQuadletをマージした目的とのこと。このゴールと衝突するため、Quadletなファイルを生成する機能をPodmanに追加する予定はないようです。&lt;/p>
&lt;p>確かにQuadletはコンテナやPodだけでなく、NetworkやVolume、Imageも宣言的に書くことができ再配布しやすいですね。Kubernetes YAMLを使ったPodmanコンテナやPodの起動をsystemdと連携できるのも魅力です。&lt;/p>
&lt;p>ちなみに、&lt;code>podman run&lt;/code> コマンドなどからQuadletファイルを生成する &lt;a class="link" href="https://github.com/k9withabone/podlet" target="_blank" rel="noopener"
>&lt;code>podlet&lt;/code>&lt;/a> というツールは開発されているようです。&lt;/p>
&lt;h2 id="-おわりに">🦭 おわりに&lt;/h2>
&lt;p>以上で、Podmanとsystemdを連携させるQuadletを完全に理解できました。Podmanユーザーの方はもちろん、Dockerユーザーの方も興味あればぜひ触ってみてください。WindowsやMacをお使いでも、&lt;a class="link" href="https://podman-desktop.io/" target="_blank" rel="noopener"
>Podman Desktop&lt;/a>で簡単に試せると思います。Quadletで遊びたい場合は、systemdがinitプロセスである必要があるので、&lt;a class="link" href="https://docs.podman.io/en/stable/markdown/podman-machine-init.1.html" target="_blank" rel="noopener"
>&lt;code>podman machine init&lt;/code>&lt;/a> して &lt;code>Fedora CoreOS&lt;/code> のVMを作成した後に、&lt;a class="link" href="https://docs.podman.io/en/stable/markdown/podman-machine-ssh.1.html" target="_blank" rel="noopener"
>&lt;code>podman machine ssh&lt;/code>&lt;/a>して試すのが簡単です。&lt;/p>
&lt;pre tabindex="0">&lt;code>[nishipy-MBP] $ podman machine list
NAME VM TYPE CREATED LAST UP CPUS MEMORY DISK SIZE
fedoracos* qemu 4 days ago Currently running 1 2GiB 100GiB
[nishipy-MBP] $ podman machine ssh fedoracos
Connecting to vm fedoracos. To close connection, use `~.` or `exit`
Fedora CoreOS 39.20231119.2.0
Tracker: https://github.com/coreos/fedora-coreos-tracker
Discuss: https://discussion.fedoraproject.org/tag/coreos
Last login: Fri Dec 11 20:12:59 2023 from 192.168.127.1
core@fedora-39:~$
&lt;/code>&lt;/pre>&lt;p>以上です。この記事のタイトルが怒られないことを祈りつつ&amp;hellip;🎅&lt;/p>
&lt;h3 id="-余談containersansible-podman-collections-でも-quadlet-をサポートしたい">🦭 (余談)&lt;code>containers/ansible-podman-collections&lt;/code> でも Quadlet をサポートしたい？&lt;/h3>
&lt;p>最近Pythonを書きたくなった時にPR送っている Ansible Collection &lt;a class="link" href="https://github.com/containers/ansible-podman-collections" target="_blank" rel="noopener"
>&lt;code>containers/ansible-podman-collections&lt;/code>&lt;/a> でも、Quadletをサポートするモジュール/オプションを追加したいな〜と思い、Issue作って提案してみました。Quadletファイル詳しい人は、&lt;code>ansible.builtin.template&lt;/code> module使う気もしますが&amp;hellip;&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/containers/ansible-podman-collections/issues/671" target="_blank" rel="noopener"
>https://github.com/containers/ansible-podman-collections/issues/671&lt;/a>&lt;/p>
&lt;h2 id="-references">🦭 References&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://blogs.gnome.org/alexl/?s=quadlet" target="_blank" rel="noopener"
>Quadlet, an easier way to run system containers | Alexander Larsson&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.redhat.com/sysadmin/quadlet-podman" target="_blank" rel="noopener"
>Make systemd better for Podman with Quadlet | Red Hat - Enable Sysadmin&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.redhat.com/sysadmin/multi-container-application-podman-quadlet" target="_blank" rel="noopener"
>Deploying a multi-container application using Podman and Quadlet | Red Hat - Enable Sysadmin&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/containers/podman/discussions/20218" target="_blank" rel="noopener"
>How to replace the &amp;ldquo;podman generate systemd&amp;rdquo; command since its deprecated #20218 - containers/podman | GitHub&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.podman.io/en/latest/markdown/podman-generate-systemd.1.html" target="_blank" rel="noopener"
>podman-generate-systemd(1) | Podman Docs&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.podman.io/en/latest/markdown/podman-systemd.unit.5.html" target="_blank" rel="noopener"
>podman-systemd.unit(5) | Podman Docs&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>