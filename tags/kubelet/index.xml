<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kubelet on nishipy notes</title><link>https://nishipy.github.io/tags/kubelet/</link><description>Recent content in kubelet on nishipy notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 24 Mar 2023 09:32:47 +0900</lastBuildDate><atom:link href="https://nishipy.github.io/tags/kubelet/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding PLEG with source code - Part 2</title><link>https://nishipy.github.io/p/understanding-pleg-with-source-code-part-2/</link><pubDate>Fri, 24 Mar 2023 09:32:47 +0900</pubDate><guid>https://nishipy.github.io/p/understanding-pleg-with-source-code-part-2/</guid><description>&lt;img src="https://nishipy.github.io/p/understanding-pleg-with-source-code-part-2/pleg.png" alt="Featured image of post Understanding PLEG with source code - Part 2" />&lt;p>For the goal of this series or abstract of the PLEG and so on, please refer to the previous post &lt;a class="link" href="https://nishipy.github.io/p/understanding-pleg-with-source-code-part-1/" >Understanding PLEG with source code - Part 1&lt;/a>.
Now, let&amp;rsquo;s read the source code of PLEG! Note that the source code in the following part comes from &lt;a class="link" href="https://github.com/kubernetes/kubernetes/tree/release-1.25" target="_blank" rel="noopener"
>&lt;code>Kubernetes 1.25&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="pkgkubeletplegpleggo">pkg/kubelet/pleg/pleg.go&lt;/h2>
&lt;p>The types of PodLifeCycleEvents in PLEG and their associated structures and interfaces are defined here.
We have some events like &lt;code>ContainerStarted&lt;/code>, &lt;code>ContainerDied&lt;/code>, &lt;code>ContainerRemoved&lt;/code>, &lt;code>PodSync&lt;/code> and &lt;code>ContainerChanged&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// PodLifeCycleEventType define the event type of pod life cycle events.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">PodLifeCycleEventType&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ContainerStarted - event type when the new state of container is running.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ContainerStarted&lt;/span> &lt;span style="color:#a6e22e">PodLifeCycleEventType&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;ContainerStarted&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ContainerDied - event type when the new state of container is exited.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ContainerDied&lt;/span> &lt;span style="color:#a6e22e">PodLifeCycleEventType&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;ContainerDied&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ContainerRemoved - event type when the old state of container is exited.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ContainerRemoved&lt;/span> &lt;span style="color:#a6e22e">PodLifeCycleEventType&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;ContainerRemoved&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// PodSync is used to trigger syncing of a pod when the observed change of
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the state of the pod cannot be captured by any single event above.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">PodSync&lt;/span> &lt;span style="color:#a6e22e">PodLifeCycleEventType&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;PodSync&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ContainerChanged - event type when the new state of container is unknown.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ContainerChanged&lt;/span> &lt;span style="color:#a6e22e">PodLifeCycleEventType&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;ContainerChanged&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// PodLifecycleEvent is an event that reflects the change of the pod state.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">PodLifecycleEvent&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The pod ID.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ID&lt;/span> &lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The type of the event.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span> &lt;span style="color:#a6e22e">PodLifeCycleEventType&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The accompanied data which varies based on the event type.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// - ContainerStarted/ContainerStopped: the container name (string).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// - All other event types: unused.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Data&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// PodLifecycleEventGenerator contains functions for generating pod life cycle events.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">PodLifecycleEventGenerator&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Start&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Watch&lt;/span>() &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">PodLifecycleEvent&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Healthy&lt;/span>() (&lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="pkgkubeletpleggenericgo">pkg/kubelet/pleg/generic.go&lt;/h2>
&lt;p>The PLEG-related source code is mainly written in this file.
The GenericPLEG structure looks as follows.
As for the Cache, please refer to the &lt;code>Runtime Pod Cache&lt;/code> described in the &lt;a class="link" href="https://nishipy.github.io/p/understanding-pleg-with-source-code-part-1/" >previous article&lt;/a>.
Looking at the comments in &lt;code>kubecontainer.Cache interface&lt;/code>, Cache seems to store the &lt;code>PodStatus&lt;/code> of all containers/pods visible to the container runtime.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">GenericPLEG&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The period for relisting.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">relistPeriod&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The container runtime.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">runtime&lt;/span> &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">Runtime&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The channel from which the subscriber listens events.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">eventChannel&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">PodLifecycleEvent&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The internal cache for pod/container information.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">podRecords&lt;/span> &lt;span style="color:#a6e22e">podRecords&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Time of the last relisting.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">relistTime&lt;/span> &lt;span style="color:#a6e22e">atomic&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Cache for storing the runtime states required for syncing pods.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">cache&lt;/span> &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">Cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// For testability.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">clock&lt;/span> &lt;span style="color:#a6e22e">clock&lt;/span>.&lt;span style="color:#a6e22e">Clock&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Pods that failed to have their status retrieved during a relist. These pods will be
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// retried during the next relisting.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">podsToReinspect&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Cache stores the PodStatus for the pods. It represents *all* the visible
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// pods/containers in the container runtime. All cache entries are at least as
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// new or newer than the global timestamp (set by UpdateTime()), while
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// individual entries may be slightly newer than the global timestamp. If a pod
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// has no states known by the runtime, Cache returns an empty PodStatus object
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// with ID populated.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Cache provides two methods to retrieve the PodStatus: the non-blocking Get()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// and the blocking GetNewerThan() method. The component responsible for
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// populating the cache is expected to call Delete() to explicitly free the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// cache entries.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Cache&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">PodStatus&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">PodStatus&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>, &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// GetNewerThan is a blocking call that only returns the status
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// when it is newer than the given time.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">GetNewerThan&lt;/span>(&lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>, &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">PodStatus&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Delete&lt;/span>(&lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">UpdateTime&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The constant definition looks like this: &lt;code>relistThreshold&lt;/code> is 3 minutes. When the Kubernetes/OpenShift nodes get NotReady, I saw this threshold in the error message &lt;code>PLEG is not healthy: pleg was last seen active XXmYYs ago; threshold is 3m0s&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// plegContainerState has a one-to-one mapping to the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// kubecontainer.State except for the non-existent state. This state
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// is introduced here to complete the state transition scenarios.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">plegContainerState&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">plegContainerRunning&lt;/span> &lt;span style="color:#a6e22e">plegContainerState&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;running&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">plegContainerExited&lt;/span> &lt;span style="color:#a6e22e">plegContainerState&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;exited&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">plegContainerUnknown&lt;/span> &lt;span style="color:#a6e22e">plegContainerState&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;unknown&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">plegContainerNonExistent&lt;/span> &lt;span style="color:#a6e22e">plegContainerState&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;non-existent&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The threshold needs to be greater than the relisting period + the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// relisting time, which can vary significantly. Set a conservative
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// threshold to avoid flipping between healthy and unhealthy.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">relistThreshold&lt;/span> = &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Minute&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="genericpleghealthy">*GenericPLEG.Healthy()&lt;/h3>
&lt;p>The Healthy() method is a pointer method of the GenericPLEG structure. It checks if the PLEG itself is working properly. More specifically, if the interval between two relists exceeds 3 minutes (if &lt;code>elapsed&lt;/code> &amp;gt; &lt;code>relistThreshold&lt;/code>), the PLEG get failed. Then it reports the errors like &lt;code>PLEG is not healthy: pleg was last seen active XXmYYs ago; threshold is 3m0s&lt;/code>.&lt;/p>
&lt;p>It seems that &lt;code>elapsed&lt;/code> will measure how much time has elapsed since the &lt;code>relistTime&lt;/code>, which is a time of type time.Time and shows the time when the last relist was started).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Healthy check if PLEG work properly.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// relistThreshold is the maximum interval between two relist.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">GenericPLEG&lt;/span>) &lt;span style="color:#a6e22e">Healthy&lt;/span>() (&lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">relistTime&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">getRelistTime&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">relistTime&lt;/span>.&lt;span style="color:#a6e22e">IsZero&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;pleg has yet to be successful&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Expose as metric so you can alert on `time()-pleg_last_seen_seconds &amp;gt; nn`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">metrics&lt;/span>.&lt;span style="color:#a6e22e">PLEGLastSeen&lt;/span>.&lt;span style="color:#a6e22e">Set&lt;/span>(float64(&lt;span style="color:#a6e22e">relistTime&lt;/span>.&lt;span style="color:#a6e22e">Unix&lt;/span>()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">elapsed&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">clock&lt;/span>.&lt;span style="color:#a6e22e">Since&lt;/span>(&lt;span style="color:#a6e22e">relistTime&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">elapsed&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">relistThreshold&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;pleg was last seen active %v ago; threshold is %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">elapsed&lt;/span>, &lt;span style="color:#a6e22e">relistThreshold&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ~~
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">GenericPLEG&lt;/span>) &lt;span style="color:#a6e22e">getRelistTime&lt;/span>() &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">relistTime&lt;/span>.&lt;span style="color:#a6e22e">Load&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">val&lt;/span>.(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="genericplegrelist">*GenericPLEG.relist()&lt;/h3>
&lt;p>PLEG&amp;rsquo;s relisting is implemented in the &lt;code>relist()&lt;/code> method.
&lt;code>relist()&lt;/code> queries the container runtime to obtain a list of pods/containers. It then compares it to the internal pods/containers and generates events accordingly. &lt;code>relist()&lt;/code> performs the following steps:&lt;/p>
&lt;p>First, the current time is retrieved. After retrieving all pod information from the container runtime, &lt;code>relistTime&lt;/code> is updated as the timestamp of the most recent start of &lt;code>relist()&lt;/code>. &lt;code>g.runtime.GetPods(true)&lt;/code> is passed with an argument &lt;code>true&lt;/code> to retrieve the list of containers including exited and dead ones.
The retrieved list is used to update the data in &lt;code>podRecords&lt;/code> (internal cache of pod/container information).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// relist queries the container runtime for list of pods/containers, compare
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// with the internal pods/containers, and generates events accordingly.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">GenericPLEG&lt;/span>) &lt;span style="color:#a6e22e">relist&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">5&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;GenericPLEG: Relisting&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">lastRelistTime&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">getRelistTime&lt;/span>(); !&lt;span style="color:#a6e22e">lastRelistTime&lt;/span>.&lt;span style="color:#a6e22e">IsZero&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">metrics&lt;/span>.&lt;span style="color:#a6e22e">PLEGRelistInterval&lt;/span>.&lt;span style="color:#a6e22e">Observe&lt;/span>(&lt;span style="color:#a6e22e">metrics&lt;/span>.&lt;span style="color:#a6e22e">SinceInSeconds&lt;/span>(&lt;span style="color:#a6e22e">lastRelistTime&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">timestamp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">clock&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">metrics&lt;/span>.&lt;span style="color:#a6e22e">PLEGRelistDuration&lt;/span>.&lt;span style="color:#a6e22e">Observe&lt;/span>(&lt;span style="color:#a6e22e">metrics&lt;/span>.&lt;span style="color:#a6e22e">SinceInSeconds&lt;/span>(&lt;span style="color:#a6e22e">timestamp&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Get all the pods.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">podList&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">runtime&lt;/span>.&lt;span style="color:#a6e22e">GetPods&lt;/span>(&lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">ErrorS&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;GenericPLEG: Unable to retrieve pods&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">updateRelistTime&lt;/span>(&lt;span style="color:#a6e22e">timestamp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pods&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">Pods&lt;/span>(&lt;span style="color:#a6e22e">podList&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// update running pod and container count
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">updateRunningPodAndContainerMetrics&lt;/span>(&lt;span style="color:#a6e22e">pods&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">podRecords&lt;/span>.&lt;span style="color:#a6e22e">setCurrent&lt;/span>(&lt;span style="color:#a6e22e">pods&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ~~
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>PodRecord&lt;/code> has the &lt;code>old&lt;/code> and &lt;code>current&lt;/code> fields, and the type of both is type &lt;code>kubecontainer.Pod&lt;/code>. &lt;code>kubecontainer.Pod&lt;/code> structure looks like as follows and contains information such as Pod name, Namespace, and list of containers.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">podRecord&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">old&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">current&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">podRecords&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">podRecord&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Pod is a group of containers.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Pod&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The ID of the pod, which can be used to retrieve a particular pod
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// from the pod list returned by GetPods().
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ID&lt;/span> &lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The name and namespace of the pod, which is readable by human.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Namespace&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// List of containers that belongs to this pod. It may contain only
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// running containers, or mixed with dead ones (when GetPods(true)).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Containers&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Container&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// List of sandboxes associated with this pod. The sandboxes are converted
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// to Container temporarily to avoid substantial changes to other
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// components. This is only populated by kuberuntime.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// TODO: use the runtimeApi.PodSandbox type directly.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Sandboxes&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Container&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, let&amp;rsquo;s go back to the relist.
For each pod, the current (&lt;code>current&lt;/code>) and past (&lt;code>old&lt;/code>) status of &lt;code>podRecords&lt;/code> will be compared and events will be generated accordingly. The generated events are added to Map &lt;code>eventsByPodID&lt;/code>. The pods are walked through one by one from this Map &lt;code>eventsByPodID&lt;/code>, and if there is an event, then the &lt;code>PodCache&lt;/code> will be updated.&lt;/p>
&lt;p>From &lt;code>case g.eventChannel &amp;lt;- events[i]&lt;/code>, we can see that the event will be sent if the PodLyifecycleEvent channel has room.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">GenericPLEG&lt;/span>) &lt;span style="color:#a6e22e">relist&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ~~
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Compare the old and the current pods, and generate events.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">eventsByPodID&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>][]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">PodLifecycleEvent&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">pid&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">podRecords&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">oldPod&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">podRecords&lt;/span>.&lt;span style="color:#a6e22e">getOld&lt;/span>(&lt;span style="color:#a6e22e">pid&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pod&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">podRecords&lt;/span>.&lt;span style="color:#a6e22e">getCurrent&lt;/span>(&lt;span style="color:#a6e22e">pid&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Get all containers in the old and the new pod.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">allContainers&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">getContainersFromPods&lt;/span>(&lt;span style="color:#a6e22e">oldPod&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">container&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">allContainers&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">events&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">computeEvents&lt;/span>(&lt;span style="color:#a6e22e">oldPod&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">container&lt;/span>.&lt;span style="color:#a6e22e">ID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">events&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">updateEvents&lt;/span>(&lt;span style="color:#a6e22e">eventsByPodID&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">needsReinspection&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">cacheEnabled&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">needsReinspection&lt;/span> = make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// If there are events associated with a pod, we should update the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// podCache.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">pid&lt;/span>, &lt;span style="color:#a6e22e">events&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">eventsByPodID&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pod&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">podRecords&lt;/span>.&lt;span style="color:#a6e22e">getCurrent&lt;/span>(&lt;span style="color:#a6e22e">pid&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">cacheEnabled&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// updateCache() will inspect the pod and update the cache. If an
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// error occurs during the inspection, we want PLEG to retry again
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// in the next relist. To achieve this, we do not update the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// associated podRecord of the pod, so that the change will be
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// detect again in the next relist.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// TODO: If many pods changed during the same relist period,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// inspecting the pod and getting the PodStatus to update the cache
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// serially may take a while. We should be aware of this and
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// parallelize if needed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">updateCache&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">pid&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Rely on updateCache calling GetPodStatus to log the actual error.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>).&lt;span style="color:#a6e22e">ErrorS&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;PLEG: Ignoring events for pod&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KRef&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">Namespace&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// make sure we try to reinspect the pod during the next relisting
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">needsReinspection&lt;/span>[&lt;span style="color:#a6e22e">pid&lt;/span>] = &lt;span style="color:#a6e22e">pod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// this pod was in the list to reinspect and we did so because it had events, so remove it
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// from the list (we don&amp;#39;t want the reinspection code below to inspect it a second time in
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// this relist execution)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> delete(&lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">podsToReinspect&lt;/span>, &lt;span style="color:#a6e22e">pid&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Update the internal storage and send out the events.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">podRecords&lt;/span>.&lt;span style="color:#a6e22e">update&lt;/span>(&lt;span style="color:#a6e22e">pid&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Map from containerId to exit code; used as a temporary cache for lookup
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">containerExitCode&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">GenericPLEG&lt;/span>) &lt;span style="color:#a6e22e">relist&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ~~
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Compare the old and the current pods, and generate events.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">eventsByPodID&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>][]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">PodLifecycleEvent&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">pid&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">podRecords&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">oldPod&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">podRecords&lt;/span>.&lt;span style="color:#a6e22e">getOld&lt;/span>(&lt;span style="color:#a6e22e">pid&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pod&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">podRecords&lt;/span>.&lt;span style="color:#a6e22e">getCurrent&lt;/span>(&lt;span style="color:#a6e22e">pid&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Get all containers in the old and the new pod.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">allContainers&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">getContainersFromPods&lt;/span>(&lt;span style="color:#a6e22e">oldPod&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">container&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">allContainers&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">events&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">computeEvents&lt;/span>(&lt;span style="color:#a6e22e">oldPod&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">container&lt;/span>.&lt;span style="color:#a6e22e">ID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">events&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">updateEvents&lt;/span>(&lt;span style="color:#a6e22e">eventsByPodID&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">needsReinspection&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">cacheEnabled&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">needsReinspection&lt;/span> = make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubecontainer&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// If there are events associated with a pod, we should update the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// podCache.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">pid&lt;/span>, &lt;span style="color:#a6e22e">events&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">eventsByPodID&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pod&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">podRecords&lt;/span>.&lt;span style="color:#a6e22e">getCurrent&lt;/span>(&lt;span style="color:#a6e22e">pid&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">cacheEnabled&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// updateCache() will inspect the pod and update the cache. If an
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// error occurs during the inspection, we want PLEG to retry again
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// in the next relist. To achieve this, we do not update the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// associated podRecord of the pod, so that the change will be
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// detect again in the next relist.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// TODO: If many pods changed during the same relist period,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// inspecting the pod and getting the PodStatus to update the cache
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// serially may take a while. We should be aware of this and
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// parallelize if needed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">updateCache&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">pid&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Rely on updateCache calling GetPodStatus to log the actual error.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>).&lt;span style="color:#a6e22e">ErrorS&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;PLEG: Ignoring events for pod&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KRef&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">Namespace&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// make sure we try to reinspect the pod during the next relisting
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">needsReinspection&lt;/span>[&lt;span style="color:#a6e22e">pid&lt;/span>] = &lt;span style="color:#a6e22e">pod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// this pod was in the list to reinspect and we did so because it had events, so remove it
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// from the list (we don&amp;#39;t want the reinspection code below to inspect it a second time in
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// this relist execution)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> delete(&lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">podsToReinspect&lt;/span>, &lt;span style="color:#a6e22e">pid&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Update the internal storage and send out the events.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">podRecords&lt;/span>.&lt;span style="color:#a6e22e">update&lt;/span>(&lt;span style="color:#a6e22e">pid&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Map from containerId to exit code; used as a temporary cache for lookup
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">containerExitCode&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">events&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Filter out events that are not reliable and no other components use yet.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">events&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">Type&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">ContainerChanged&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">eventChannel&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">events&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">metrics&lt;/span>.&lt;span style="color:#a6e22e">PLEGDiscardEvents&lt;/span>.&lt;span style="color:#a6e22e">Inc&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">ErrorS&lt;/span>(&lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Event channel is full, discard this relist() cycle event&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Log exit code of containers when they finished in a particular event
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">events&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">Type&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">ContainerDied&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Fill up containerExitCode map for ContainerDied event when first time appeared
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">containerExitCode&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">pod&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">cache&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Get updated podStatus
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">status&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">ID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">containerStatus&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">status&lt;/span>.&lt;span style="color:#a6e22e">ContainerStatuses&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">containerExitCode&lt;/span>[&lt;span style="color:#a6e22e">containerStatus&lt;/span>.&lt;span style="color:#a6e22e">ID&lt;/span>.&lt;span style="color:#a6e22e">ID&lt;/span>] = &lt;span style="color:#a6e22e">containerStatus&lt;/span>.&lt;span style="color:#a6e22e">ExitCode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">containerID&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">events&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">Data&lt;/span>.(&lt;span style="color:#66d9ef">string&lt;/span>); &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">exitCode&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">containerExitCode&lt;/span>[&lt;span style="color:#a6e22e">containerID&lt;/span>]; &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">pod&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Generic (PLEG): container finished&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;podID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">ID&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;containerID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">containerID&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;exitCode&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">exitCode&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">cacheEnabled&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// reinspect any pods that failed inspection during the previous relist
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">podsToReinspect&lt;/span>) &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">5&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;GenericPLEG: Reinspecting pods that previously failed inspection&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">pid&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">podsToReinspect&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">updateCache&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">pid&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Rely on updateCache calling GetPodStatus to log the actual error.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">5&lt;/span>).&lt;span style="color:#a6e22e">ErrorS&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;PLEG: pod failed reinspection&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KRef&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">Namespace&lt;/span>, &lt;span style="color:#a6e22e">pod&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">needsReinspection&lt;/span>[&lt;span style="color:#a6e22e">pid&lt;/span>] = &lt;span style="color:#a6e22e">pod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Update the cache timestamp. This needs to happen *after*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// all pods have been properly updated in the cache.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">UpdateTime&lt;/span>(&lt;span style="color:#a6e22e">timestamp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// make sure we retain the list of pods that need reinspecting the next time relist is called
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">podsToReinspect&lt;/span> = &lt;span style="color:#a6e22e">needsReinspection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pod Lifecycle Event generation is performed by &lt;code>generateEvents()&lt;/code> below. As you can see from the first if statement, if the state is the same as the previous state, no event will be generated.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">generateEvents&lt;/span>(&lt;span style="color:#a6e22e">podID&lt;/span> &lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">UID&lt;/span>, &lt;span style="color:#a6e22e">cid&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">oldState&lt;/span>, &lt;span style="color:#a6e22e">newState&lt;/span> &lt;span style="color:#a6e22e">plegContainerState&lt;/span>) []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">PodLifecycleEvent&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">newState&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">oldState&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;GenericPLEG&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;podUID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">podID&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;containerID&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">cid&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;oldState&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">oldState&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;newState&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">newState&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">newState&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">plegContainerRunning&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">PodLifecycleEvent&lt;/span>{{&lt;span style="color:#a6e22e">ID&lt;/span>: &lt;span style="color:#a6e22e">podID&lt;/span>, &lt;span style="color:#a6e22e">Type&lt;/span>: &lt;span style="color:#a6e22e">ContainerStarted&lt;/span>, &lt;span style="color:#a6e22e">Data&lt;/span>: &lt;span style="color:#a6e22e">cid&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">plegContainerExited&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">PodLifecycleEvent&lt;/span>{{&lt;span style="color:#a6e22e">ID&lt;/span>: &lt;span style="color:#a6e22e">podID&lt;/span>, &lt;span style="color:#a6e22e">Type&lt;/span>: &lt;span style="color:#a6e22e">ContainerDied&lt;/span>, &lt;span style="color:#a6e22e">Data&lt;/span>: &lt;span style="color:#a6e22e">cid&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">plegContainerUnknown&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">PodLifecycleEvent&lt;/span>{{&lt;span style="color:#a6e22e">ID&lt;/span>: &lt;span style="color:#a6e22e">podID&lt;/span>, &lt;span style="color:#a6e22e">Type&lt;/span>: &lt;span style="color:#a6e22e">ContainerChanged&lt;/span>, &lt;span style="color:#a6e22e">Data&lt;/span>: &lt;span style="color:#a6e22e">cid&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">plegContainerNonExistent&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">oldState&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">plegContainerExited&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// We already reported that the container died before.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">PodLifecycleEvent&lt;/span>{{&lt;span style="color:#a6e22e">ID&lt;/span>: &lt;span style="color:#a6e22e">podID&lt;/span>, &lt;span style="color:#a6e22e">Type&lt;/span>: &lt;span style="color:#a6e22e">ContainerRemoved&lt;/span>, &lt;span style="color:#a6e22e">Data&lt;/span>: &lt;span style="color:#a6e22e">cid&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">PodLifecycleEvent&lt;/span>{{&lt;span style="color:#a6e22e">ID&lt;/span>: &lt;span style="color:#a6e22e">podID&lt;/span>, &lt;span style="color:#a6e22e">Type&lt;/span>: &lt;span style="color:#a6e22e">ContainerDied&lt;/span>, &lt;span style="color:#a6e22e">Data&lt;/span>: &lt;span style="color:#a6e22e">cid&lt;/span>}, {&lt;span style="color:#a6e22e">ID&lt;/span>: &lt;span style="color:#a6e22e">podID&lt;/span>, &lt;span style="color:#a6e22e">Type&lt;/span>: &lt;span style="color:#a6e22e">ContainerRemoved&lt;/span>, &lt;span style="color:#a6e22e">Data&lt;/span>: &lt;span style="color:#a6e22e">cid&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;unrecognized container state: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">newState&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="genericplegstart">*GenericPLEG.Start()&lt;/h3>
&lt;p>In the &lt;code>Start()&lt;/code> method, the &lt;code>relist()&lt;/code> method will be executed in goroutine. The &lt;code>wait.Until()&lt;/code> is used here, hence it loops at &lt;code>relistPeriod&lt;/code> (= 1 second) intervals.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Start spawns a goroutine to relist periodically.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">GenericPLEG&lt;/span>) &lt;span style="color:#a6e22e">Start&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">Until&lt;/span>(&lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">relist&lt;/span>, &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">relistPeriod&lt;/span>, &lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">NeverStop&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="genericplegwatch">*GenericPLEG.Watch()&lt;/h3>
&lt;p>&lt;code>Watch()&lt;/code> is a method that returns a channel for &lt;code>PodLifecycleEvents&lt;/code>. It returns the channel &lt;code>*PodLifecycleEvent&lt;/code>, and the kubelet receives events from this channel and performs the Pod synchronizations as appropriate.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Watch returns a channel from which the subscriber can receive PodLifecycleEvent
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// events.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// TODO: support multiple subscribers.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">GenericPLEG&lt;/span>) &lt;span style="color:#a6e22e">Watch&lt;/span>() &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">PodLifecycleEvent&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>.&lt;span style="color:#a6e22e">eventChannel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="pkgkubeletkubeletgo">pkg/kubelet/kubelet.go&lt;/h2>
&lt;p>Furthermore, let&amp;rsquo;s see how PLEG is called on the kubelet side. There are some PLEG-related constants: the relist interval is 1 second, and the capacity of the channel for &lt;code>PodLifecycleEvents&lt;/code> looks 1000.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//~~
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Capacity of the channel for receiving pod lifecycle events. This number
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// is a bit arbitrary and may be adjusted in the future.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">plegChannelCapacity&lt;/span> = &lt;span style="color:#ae81ff">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Generic PLEG relies on relisting for discovering container events.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// A longer period means that kubelet will take longer to detect container
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// changes and to update pod status. On the other hand, a shorter period
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// will cause more frequent relisting (e.g., container runtime operations),
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// leading to higher cpu usage.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Note that even though we set the period to 1s, the relisting itself can
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// take more than 1s to finish if the container runtime responds slowly
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// and/or when there are many container changes in one cycle.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">plegRelistPeriod&lt;/span> = &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//~~
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The NewMainKubelet() will instantiate a new Kubelet object along with all necessary internal modules. The PLEG-related processing is as follows. After instantiating the &lt;code>GenericPLEG&lt;/code> object in &lt;code>NewGenericPLEG()&lt;/code>, it will be added to the health check mechanism in the main loop of the kubelet. As a result, we sometimes see the error messages like &lt;code>the PLEG is not healthy: pleg was last seen active XXmYYs ago; threshold is 3m0s&lt;/code> in the kubelet log.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// NewMainKubelet instantiates a new Kubelet object along with all the required internal modules.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// No initialization of Kubelet and its modules should happen here.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewMainKubelet&lt;/span>(&lt;span style="color:#a6e22e">kubeCfg&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">kubeletconfiginternal&lt;/span>.&lt;span style="color:#a6e22e">KubeletConfiguration&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kubeDeps&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Dependencies&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">crOptions&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">ContainerRuntimeOptions&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">hostname&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">hostnameOverridden&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ~~
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">seccompDefault&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Kubelet&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ~~
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klet&lt;/span>.&lt;span style="color:#a6e22e">pleg&lt;/span> = &lt;span style="color:#a6e22e">pleg&lt;/span>.&lt;span style="color:#a6e22e">NewGenericPLEG&lt;/span>(&lt;span style="color:#a6e22e">klet&lt;/span>.&lt;span style="color:#a6e22e">containerRuntime&lt;/span>, &lt;span style="color:#a6e22e">plegChannelCapacity&lt;/span>, &lt;span style="color:#a6e22e">plegRelistPeriod&lt;/span>, &lt;span style="color:#a6e22e">klet&lt;/span>.&lt;span style="color:#a6e22e">podCache&lt;/span>, &lt;span style="color:#a6e22e">clock&lt;/span>.&lt;span style="color:#a6e22e">RealClock&lt;/span>{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klet&lt;/span>.&lt;span style="color:#a6e22e">runtimeState&lt;/span> = &lt;span style="color:#a6e22e">newRuntimeState&lt;/span>(&lt;span style="color:#a6e22e">maxWaitForContainerRuntime&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klet&lt;/span>.&lt;span style="color:#a6e22e">runtimeState&lt;/span>.&lt;span style="color:#a6e22e">addHealthCheck&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PLEG&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klet&lt;/span>.&lt;span style="color:#a6e22e">pleg&lt;/span>.&lt;span style="color:#a6e22e">Healthy&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ~~
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can see that PLEG is also started with &lt;code>kl.pleg.Start()&lt;/code> in the &lt;code>Run()&lt;/code> method on the kubelet side.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Run starts the kubelet reacting to config updates
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">kl&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Kubelet&lt;/span>) &lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">updates&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">kubetypes&lt;/span>.&lt;span style="color:#a6e22e">PodUpdate&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">logServer&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">logServer&lt;/span> = &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StripPrefix&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/logs/&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">FileServer&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Dir&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/var/log/&amp;#34;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">kubeClient&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;No API server defined - no node status update will be sent&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Start the cloud provider sync manager
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">cloudResourceSyncManager&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">cloudResourceSyncManager&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">NeverStop&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">initializeModules&lt;/span>(); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">recorder&lt;/span>.&lt;span style="color:#a6e22e">Eventf&lt;/span>(&lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">nodeRef&lt;/span>, &lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">EventTypeWarning&lt;/span>, &lt;span style="color:#a6e22e">events&lt;/span>.&lt;span style="color:#a6e22e">KubeletSetupFailed&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">ErrorS&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Failed to initialize internal modules&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Exit&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Start volume manager
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">volumeManager&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">sourcesReady&lt;/span>, &lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">NeverStop&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">kubeClient&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Introduce some small jittering to ensure that over time the requests won&amp;#39;t start
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// accumulating at approximately the same time from the set of nodes due to priority and
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// fairness effect.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">JitterUntil&lt;/span>(&lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">syncNodeStatus&lt;/span>, &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">nodeStatusUpdateFrequency&lt;/span>, &lt;span style="color:#ae81ff">0.04&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>, &lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">NeverStop&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">fastStatusUpdateOnce&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// start syncing lease
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">nodeLeaseController&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">NeverStop&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">Until&lt;/span>(&lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">updateRuntimeUp&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>, &lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">NeverStop&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Set up iptables util rules
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">makeIPTablesUtilChains&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">initNetworkUtil&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Start component sync loops.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">statusManager&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Start syncing RuntimeClasses if enabled.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">runtimeClassManager&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">runtimeClassManager&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>(&lt;span style="color:#a6e22e">wait&lt;/span>.&lt;span style="color:#a6e22e">NeverStop&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Start the pod lifecycle event generator.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">pleg&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">syncLoop&lt;/span>(&lt;span style="color:#a6e22e">updates&lt;/span>, &lt;span style="color:#a6e22e">kl&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>At the end of the &lt;code>Run()&lt;/code> method, the &lt;code>syncLoop()&lt;/code> method is also called. The &lt;code>plegCh := kl.pleg.Watch()&lt;/code> part in &lt;code>syncLoop()&lt;/code> obtains a channel to read PLEG updates and receives events generated by PLEG via the channel.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// syncLoop is the main loop for processing changes. It watches for changes from
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// three channels (file, apiserver, and http) and creates a union of them. For
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// any new change seen, will run a sync against desired state and running state. If
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// no changes are seen to the configuration, will synchronize the last known desired
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// state every sync-frequency seconds. Never returns.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">kl&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Kubelet&lt;/span>) &lt;span style="color:#a6e22e">syncLoop&lt;/span>(&lt;span style="color:#a6e22e">updates&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">kubetypes&lt;/span>.&lt;span style="color:#a6e22e">PodUpdate&lt;/span>, &lt;span style="color:#a6e22e">handler&lt;/span> &lt;span style="color:#a6e22e">SyncHandler&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Starting kubelet main sync loop&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The syncTicker wakes up kubelet to checks if there are any pod workers
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// that need to be sync&amp;#39;d. A one-second period is sufficient because the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// sync interval is defaulted to 10s.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">syncTicker&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">NewTicker&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">syncTicker&lt;/span>.&lt;span style="color:#a6e22e">Stop&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">housekeepingTicker&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">NewTicker&lt;/span>(&lt;span style="color:#a6e22e">housekeepingPeriod&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">housekeepingTicker&lt;/span>.&lt;span style="color:#a6e22e">Stop&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">plegCh&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">pleg&lt;/span>.&lt;span style="color:#a6e22e">Watch&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">base&lt;/span> = &lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Millisecond&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">max&lt;/span> = &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">factor&lt;/span> = &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">duration&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">base&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Responsible for checking limits in resolv.conf
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// The limits do not have anything to do with individual pods
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Since this is called in syncLoop, we don&amp;#39;t need to call it anywhere else
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">dnsConfigurer&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">dnsConfigurer&lt;/span>.&lt;span style="color:#a6e22e">ResolverConfig&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">dnsConfigurer&lt;/span>.&lt;span style="color:#a6e22e">CheckLimitsForResolvConf&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">runtimeState&lt;/span>.&lt;span style="color:#a6e22e">runtimeErrors&lt;/span>(); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">ErrorS&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Skipping pod synchronization&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// exponential backoff
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#a6e22e">duration&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">duration&lt;/span> = &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>(&lt;span style="color:#a6e22e">math&lt;/span>.&lt;span style="color:#a6e22e">Min&lt;/span>(float64(&lt;span style="color:#a6e22e">max&lt;/span>), &lt;span style="color:#a6e22e">factor&lt;/span>&lt;span style="color:#f92672">*&lt;/span>float64(&lt;span style="color:#a6e22e">duration&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// reset backoff if we have a success
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">duration&lt;/span> = &lt;span style="color:#a6e22e">base&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">syncLoopMonitor&lt;/span>.&lt;span style="color:#a6e22e">Store&lt;/span>(&lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">clock&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">syncLoopIteration&lt;/span>(&lt;span style="color:#a6e22e">updates&lt;/span>, &lt;span style="color:#a6e22e">handler&lt;/span>, &lt;span style="color:#a6e22e">syncTicker&lt;/span>.&lt;span style="color:#a6e22e">C&lt;/span>, &lt;span style="color:#a6e22e">housekeepingTicker&lt;/span>.&lt;span style="color:#a6e22e">C&lt;/span>, &lt;span style="color:#a6e22e">plegCh&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">syncLoopMonitor&lt;/span>.&lt;span style="color:#a6e22e">Store&lt;/span>(&lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">clock&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>syncLoopIteration()&lt;/code> is a method that reads various channels and dispatches them to a given Handler. The &lt;code>plegCh&lt;/code> channel is described as being used for Runtime Cache updates and Pod synchronization. For example, if the kubelet receives the event PLEG&amp;rsquo;s &lt;code>ContainerDied&lt;/code> (= the latest container state is Exited), the kubelet will delete the container instance in question in the pod via &lt;code>cleanUpContainersInPod()&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// syncLoopIteration reads from various channels and dispatches pods to the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// given handler.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Arguments:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 1. configCh: a channel to read config events from
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 2. handler: the SyncHandler to dispatch pods to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 3. syncCh: a channel to read periodic sync events from
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 4. housekeepingCh: a channel to read housekeeping events from
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 5. plegCh: a channel to read PLEG updates from
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Events are also read from the kubelet liveness manager&amp;#39;s update channel.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// The workflow is to read from one of the channels, handle that event, and
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// update the timestamp in the sync loop monitor.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Here is an appropriate place to note that despite the syntactical
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// similarity to the switch statement, the case statements in a select are
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// evaluated in a pseudorandom order if there are multiple channels ready to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// read from when the select is evaluated. In other words, case statements
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// are evaluated in random order, and you can not assume that the case
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// statements evaluate in order if multiple channels have events.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// With that in mind, in truly no particular order, the different channels
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// are handled as follows:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// - configCh: dispatch the pods for the config change to the appropriate
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// handler callback for the event type
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// - plegCh: update the runtime cache; sync pod
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// - syncCh: sync all pods waiting for sync
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// - housekeepingCh: trigger cleanup of pods
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// - health manager: sync pods that have failed or in which one or more
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// containers have failed health checks
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">kl&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Kubelet&lt;/span>) &lt;span style="color:#a6e22e">syncLoopIteration&lt;/span>(&lt;span style="color:#a6e22e">configCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">kubetypes&lt;/span>.&lt;span style="color:#a6e22e">PodUpdate&lt;/span>, &lt;span style="color:#a6e22e">handler&lt;/span> &lt;span style="color:#a6e22e">SyncHandler&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">syncCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>, &lt;span style="color:#a6e22e">housekeepingCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>, &lt;span style="color:#a6e22e">plegCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">pleg&lt;/span>.&lt;span style="color:#a6e22e">PodLifecycleEvent&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ~~
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">plegCh&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Type&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">pleg&lt;/span>.&lt;span style="color:#a6e22e">ContainerStarted&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// record the most recent time we observed a container start for this pod.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// this lets us selectively invalidate the runtimeCache when processing a delete for this pod
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// to make sure we don&amp;#39;t miss handling graceful termination for containers we reported as having started.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">lastContainerStartedTime&lt;/span>.&lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">ID&lt;/span>, &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">isSyncPodWorthy&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// PLEG event for a pod; sync it.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">pod&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">podManager&lt;/span>.&lt;span style="color:#a6e22e">GetPodByUID&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">ID&lt;/span>); &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;SyncLoop (PLEG): event for pod&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;pod&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">KObj&lt;/span>(&lt;span style="color:#a6e22e">pod&lt;/span>), &lt;span style="color:#e6db74">&amp;#34;event&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">handler&lt;/span>.&lt;span style="color:#a6e22e">HandlePodSyncs&lt;/span>([]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">v1&lt;/span>.&lt;span style="color:#a6e22e">Pod&lt;/span>{&lt;span style="color:#a6e22e">pod&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// If the pod no longer exists, ignore the event.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>).&lt;span style="color:#a6e22e">InfoS&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;SyncLoop (PLEG): pod does not exist, ignore irrelevant event&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;event&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Type&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">pleg&lt;/span>.&lt;span style="color:#a6e22e">ContainerDied&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">containerID&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">Data&lt;/span>.(&lt;span style="color:#66d9ef">string&lt;/span>); &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kl&lt;/span>.&lt;span style="color:#a6e22e">cleanUpContainersInPod&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">ID&lt;/span>, &lt;span style="color:#a6e22e">containerID&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ~~
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="pkgkubeletruntimego">pkg/kubelet/runtime.go&lt;/h2>
&lt;p>Let&amp;rsquo;s also look at where the PLEG-related health check is added to the kubelet runtime health check with &lt;code>klet.runtimeState&lt;/code>.The health check functions, which were added by &lt;code>addHealthCheck()&lt;/code>, will be called with the &lt;code>for&lt;/code> statement and evaluated. When the health check fails, the error message will be shown with a format like &lt;code>fmt.Errorf(&amp;quot;%s is not healthy: %v&amp;quot;, hc.name, err)&lt;/code>.
Yeah, now we can see where &lt;code>PLEG is not healthy: pleg was last seen active XXmYYs ago; threshold is 3m&lt;/code> comes from!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// A health check function should be efficient and not rely on external
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// components (e.g., container runtime).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">healthCheckFnType&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() (&lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">healthCheck&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fn&lt;/span> &lt;span style="color:#a6e22e">healthCheckFnType&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">runtimeState&lt;/span>) &lt;span style="color:#a6e22e">addHealthCheck&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#a6e22e">healthCheckFnType&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Unlock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">healthChecks&lt;/span> = append(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">healthChecks&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">healthCheck&lt;/span>{&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">fn&lt;/span>: &lt;span style="color:#a6e22e">f&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">runtimeState&lt;/span>) &lt;span style="color:#a6e22e">runtimeErrors&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">RLock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">RUnlock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">errs&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">error&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">lastBaseRuntimeSync&lt;/span>.&lt;span style="color:#a6e22e">IsZero&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">errs&lt;/span> = append(&lt;span style="color:#a6e22e">errs&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;container runtime status check may not have completed yet&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">lastBaseRuntimeSync&lt;/span>.&lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">baseRuntimeSyncThreshold&lt;/span>).&lt;span style="color:#a6e22e">After&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">errs&lt;/span> = append(&lt;span style="color:#a6e22e">errs&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;container runtime is down&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">hc&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">healthChecks&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ok&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">hc&lt;/span>.&lt;span style="color:#a6e22e">fn&lt;/span>(); !&lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">errs&lt;/span> = append(&lt;span style="color:#a6e22e">errs&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%s is not healthy: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">hc&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">runtimeError&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">errs&lt;/span> = append(&lt;span style="color:#a6e22e">errs&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">runtimeError&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">utilerrors&lt;/span>.&lt;span style="color:#a6e22e">NewAggregate&lt;/span>(&lt;span style="color:#a6e22e">errs&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="whats-next-in-pleg">What&amp;rsquo;s next in PLEG?&lt;/h2>
&lt;p>I found the KEP &lt;code>Kubelet Evented PLEG for Better Performance&lt;/code>. It seems still under development for now.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/kubernetes/enhancements/issues/3386" target="_blank" rel="noopener"
>Isuue: Kubelet Evented PLEG for Better Performance - GitHub&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://access.redhat.com/solutions/3258011" target="_blank" rel="noopener"
>&amp;ldquo;PLEG is not healthy&amp;rdquo; errors on OpenShift nodes. - Red Hat Customer Portal&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://kubernetes.io/ja/docs/concepts/" target="_blank" rel="noopener"
>コンセプト - Kubernetes Document&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://developers.redhat.com/blog/2019/11/13/pod-lifecycle-event-generator-understanding-the-pleg-is-not-healthy-issue-in-kubernetes#" target="_blank" rel="noopener"
>Pod Lifecycle Event Generator: Understanding the “PLEG is not healthy” issue in Kubernetes - Red Hat Developer&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/kubernetes/design-proposals-archive" target="_blank" rel="noopener"
>kubernetes/design-proposals-archive - GitHub&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/kubernetes/kubernetes/tree/release-1.25/pkg/kubelet/pleg" target="_blank" rel="noopener"
>kubernetes/pkg/kubelet/pleg at release-1.25 - GitHub&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/kubernetes/enhancements/issues/3386" target="_blank" rel="noopener"
>Isuue: Kubelet Evented PLEG for Better Performance - GitHub&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Understanding PLEG with source code - Part 1</title><link>https://nishipy.github.io/p/understanding-pleg-with-source-code-part-1/</link><pubDate>Sat, 28 Jan 2023 13:50:47 +0900</pubDate><guid>https://nishipy.github.io/p/understanding-pleg-with-source-code-part-1/</guid><description>&lt;img src="https://nishipy.github.io/p/understanding-pleg-with-source-code-part-1/pleg.png" alt="Featured image of post Understanding PLEG with source code - Part 1" />&lt;p>Note: This article is a translation of &lt;a class="link" href="https://nishipy.com/archives/1958" target="_blank" rel="noopener"
>「kubeletのPLEGをソースコード読んで理解したかった」&lt;/a>.
&lt;a class="link" href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/" target="_blank" rel="noopener"
>Kubelet&lt;/a> has a lot of components, and one of the most important ones is PLEG, which stands for &amp;ldquo;Pod Lifecycle Event Generator&amp;rdquo;. In this article, we&amp;rsquo;ll look into the implementation to understand how PLEG works.&lt;/p>
&lt;h2 id="notready-nodes-due-to-pleg-is-not-healthy">NotReady nodes due to &amp;ldquo;PLEG is not healthy&amp;rdquo;&lt;/h2>
&lt;p>In Kubernetes, there are various causes for nodes to become NotReady state. &lt;a class="link" href="https://access.redhat.com/solutions/3258011" target="_blank" rel="noopener"
>For example&lt;/a>, a node may become NotReady with output like &lt;code>PLEG is not healthy: pleg was last seen active 3m20s ago; threshold is 3m0s. PLEG(←?!) was last seen active 3m20s ago; threshold is 3m0s It seems that the last time PLEG(←?!) was active was 3m20s ago; threshold is 3m0s &lt;/code>, so it seems that it was judged as abnormal because it exceeded the threshold of 3 minutes. I don&amp;rsquo;t know what it&amp;rsquo;s talking about, what the heck is PLEG&amp;hellip;&lt;/p>
&lt;h2 id="pleg">PLEG&lt;/h2>
&lt;p>PLEG is part of kubelet and stands for Pod Lifecycle Event Generator. An overview was found in &lt;a class="link" href="https://kubernetes.io/ja/docs/concepts/" target="_blank" rel="noopener"
>Concepts in Kubernetes Japanese documentation&lt;/a>. Below is its translation with DeepL.&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;gt; Once the desired state is set, the *Kubernetes control plane* using the Pod Lifecycle Event Generator (PLEG) functions to match the current state of the cluster to the desired state. To do so, Kubernetes automatically performs various tasks (e.g., starting or restarting containers, scaling the number of replicas of a particular application, etc.).
&lt;/code>&lt;/pre>&lt;p>Okay, that sounds very important. There is an embedded link to PLEG&amp;rsquo;s Design Proposal in this document, but it seems to be out of date and I cannot access it. Apparently, the old Design Proposal has been moved to &lt;a class="link" href="https://github.com/kubernetes/design-proposals-archive" target="_blank" rel="noopener"
>kubernetes/design-proposals-archive&lt;/a>. We can find the PLEG &lt;a class="link" href="https://github.com/kubernetes/design-proposals-archive/blob/main/node/pod-lifecycle-event-generator.md" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;p>It seems to be responsible for talking to Container Runtime and the main loop of kubelet, as shown below.&lt;/p>
&lt;blockquote>
&lt;p>&lt;img src="https://nishipy.github.io/p/understanding-pleg-with-source-code-part-1/pleg.png"
width="1206"
height="886"
srcset="https://nishipy.github.io/p/understanding-pleg-with-source-code-part-1/pleg_hu198fe2aa39d96d5ee57c047fcc9cf0ca_184542_480x0_resize_box_3.png 480w, https://nishipy.github.io/p/understanding-pleg-with-source-code-part-1/pleg_hu198fe2aa39d96d5ee57c047fcc9cf0ca_184542_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="326px"
>
cited from: &lt;a class="link" href="https://github.com/kubernetes/design-proposals-archive/blob/main/node/pod-lifecycle-event-generator.md#overview" target="_blank" rel="noopener"
>https://github.com/kubernetes/design-proposals-archive/blob/main/node/pod-lifecycle-event-generator.md#overview&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="relisting-in-pleg">Relisting in PLEG&lt;/h3>
&lt;p>According to the chapter &lt;a class="link" href="https://github.com/kubernetes/design-proposals-archive/blob/main/node/pod-lifecycle-event-generator.md#detect-changes-in-container-states-via-relisting" target="_blank" rel="noopener"
>Detect Changes in Container States Via Relisting&lt;/a>, it is designed to detect container state changes by a process called &amp;ldquo;relisting&amp;rdquo;.&lt;/p>
&lt;ul>
&lt;li>PLEG relist all containers periodically to detect container state changes&lt;/li>
&lt;li>It helps prevent all Pod Workers from polling the container runtime in parallel&lt;/li>
&lt;li>Therefore only Pod Workers that need Sync will be launched, which is even more efficient&lt;/li>
&lt;/ul>
&lt;h2 id="pod-workers">Pod Workers&lt;/h2>
&lt;p>FYI, &lt;a class="link" href="https://github.com/kubernetes/kubernetes/blob/release-1.25/pkg/kubelet/pod_workers.go#L303-L378" target="_blank" rel="noopener"
>Pod Worker&lt;/a> is implemented here. It&amp;rsquo;s also a component of kubelet, and &lt;code>keeps track of operations on pods and ensures each pod is reconciled with the container runtime and other subsystems&lt;/code>.&lt;/p>
&lt;h2 id="runtime-pod-cache">Runtime Pod Cache&lt;/h2>
&lt;p>We also need to know the Runtime Pod Cache to look into PLEG.
The design proposal is &lt;a class="link" href="https://github.com/kubernetes/design-proposals-archive/blob/main/node/runtime-pod-cache.md" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>&lt;img src="https://nishipy.github.io/p/understanding-pleg-with-source-code-part-1/runtimepodcache.png"
width="1214"
height="942"
srcset="https://nishipy.github.io/p/understanding-pleg-with-source-code-part-1/runtimepodcache_hu640db9cf4b083a2ee3efc8fe86f47dbc_196885_480x0_resize_box_3.png 480w, https://nishipy.github.io/p/understanding-pleg-with-source-code-part-1/runtimepodcache_hu640db9cf4b083a2ee3efc8fe86f47dbc_196885_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="309px"
>
cited from: &lt;a class="link" href="https://github.com/kubernetes/design-proposals-archive/blob/main/node/runtime-pod-cache.md#runtime-pod-cache" target="_blank" rel="noopener"
>https://github.com/kubernetes/design-proposals-archive/blob/main/node/runtime-pod-cache.md#runtime-pod-cache&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>The diagram is almost the same as the one we saw for PLEG, but a box named &amp;ldquo;pod cache&amp;rdquo; is added between PLEG and Pod Workers.&lt;/p>
&lt;p>The Runtime Pod Cache is an in-memory cache that stores the state of all pods and is used to synchronize pods; it is managed by PLEG and acts as a Single Source of Truth (SSOT) for the internal pod status, so that kubelets do not need to directly query the container runtime directly.&lt;/p>
&lt;p>PLEG is responsible for updating the Pod Cache entries, keeping the cache up-to-date at all times. The design seems to be to process in the following order, generating and sending the corresponding Pod Lifecycle Event only when there is a change in the Pod.&lt;/p>
&lt;ol>
&lt;li>Detect change of container state&lt;/li>
&lt;li>Inspect the pod for details&lt;/li>
&lt;li>Update the pod cache with the new PodStatus&lt;/li>
&lt;/ol>
&lt;h2 id="more-information-and-source-code">More information and source code&lt;/h2>
&lt;p>Now that we have understood a little about PLEG, let&amp;rsquo;s look into it in more detail.&lt;/p>
&lt;p>First of all, the following article will help a lot to understand it with many diagrams and snippets of source codes. Please note that the information in it is as of Kubernetes 1.14.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://developers.redhat.com/blog/2019/11/13/pod-lifecycle-event-generator-understanding-the-pleg-is-not-healthy-issue-in-kubernetes#" target="_blank" rel="noopener"
>Pod Lifecycle Event Generator: Understanding the &amp;ldquo;PLEG is not healthy&amp;rdquo; issue in Kubernetes | Red Hat Developer&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="in-the-next-article">In the next article&amp;hellip;&lt;/h2>
&lt;p>It might be sufficient to read the above for understanding, but the version of Kubernetes is a little old.
Therefore, I&amp;rsquo;ll read the source code of Kubernetes 1.25 in the next.&lt;/p></description></item></channel></rss>