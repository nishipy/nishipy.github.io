<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kind on nishipy notes</title><link>https://nishipy.github.io/tags/kind/</link><description>Recent content in kind on nishipy notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 21 Jan 2023 10:51:42 +0900</lastBuildDate><atom:link href="https://nishipy.github.io/tags/kind/index.xml" rel="self" type="application/rss+xml"/><item><title>Resource allocation to Kind nodes</title><link>https://nishipy.github.io/p/resource-allocation-to-kind-nodes/</link><pubDate>Sat, 21 Jan 2023 10:51:42 +0900</pubDate><guid>https://nishipy.github.io/p/resource-allocation-to-kind-nodes/</guid><description>&lt;img src="https://nishipy.github.io/p/resource-allocation-to-kind-nodes/logo.png" alt="Featured image of post Resource allocation to Kind nodes " />&lt;p>Note: This article is a translation of &lt;a class="link" href="https://nishipy.com/archives/1793" target="_blank" rel="noopener"
>「kindでNodeに割り当てるリソースを定義する」&lt;/a>. I posted the original on Dec 18 2020, so some information might be old.&lt;/p>
&lt;p>There are some famous tools to create local Kubernetes clusters. &lt;a class="link" href="https://github.com/kubernetes-sigs/kind" target="_blank" rel="noopener"
>Kind&lt;/a> is one of them. In this post, I introduce the way to allocate compute resources(memory and/or CPU) to nodes of &lt;a class="link" href="https://github.com/kubernetes-sigs/kind" target="_blank" rel="noopener"
>Kind&lt;/a>.&lt;/p>
&lt;h2 id="adjust-resources-for-docker-desktop">Adjust resources for Docker Desktop&lt;/h2>
&lt;p>When using Kind, each node of a Kubernetes cluster is built as a Docker container. Therefore, first, configure the resources available to Docker in the Docker Desktop settings. Set them to about 4 CPU cores and 8GB of memory, for instance.&lt;/p>
&lt;p>&lt;img src="https://nishipy.github.io/p/resource-allocation-to-kind-nodes/docker-desktop-resources.png"
width="1556"
height="968"
srcset="https://nishipy.github.io/p/resource-allocation-to-kind-nodes/docker-desktop-resources_hu13aed214bcfc6718d8b2b4bfea2628f3_98503_480x0_resize_box_3.png 480w, https://nishipy.github.io/p/resource-allocation-to-kind-nodes/docker-desktop-resources_hu13aed214bcfc6718d8b2b4bfea2628f3_98503_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>&lt;/p>
&lt;h2 id="create-a-kind-configuration-file">Create a Kind configuration file&lt;/h2>
&lt;p>Next, we create a configuration file for Kind. You can get a general idea by looking at &lt;a class="link" href="https://kind.sigs.k8s.io/docs/user/quick-start/#configuring-your-kind-cluster" target="_blank" rel="noopener"
>Configuring Your kind Cluster&lt;/a> in the documentation. It is a brief description of the cluster.&lt;/p>
&lt;h3 id="define-multiple-nodes-in-a-cluster">Define multiple nodes in a cluster&lt;/h3>
&lt;p>For now, we will try to configure one Master and one Worker. All we need to do is to define the list under the &lt;code>nodes&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
- role: control-plane
- role: worker
&lt;/code>&lt;/pre>&lt;h3 id="define-resources-for-nodes">Define resources for nodes&lt;/h3>
&lt;p>According to &lt;a class="link" href="https://github.com/kubernetes-sigs/kind/issues/1524" target="_blank" rel="noopener"
>this issue&lt;/a>, you can define the resource allocation since the Kind cluster is created with &lt;a class="link" href="https://kubernetes.io/ja/docs/setup/production-environment/tools/kubeadm/install-kubeadm/" target="_blank" rel="noopener"
>kubeadm&lt;/a>. However, it does not seem to be a formal method, as you can find a comment like &amp;ldquo;kubelet configuration object is not respected per node in kubeadm currently, only from init&amp;rdquo;.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Cluster&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">kind.x-k8s.io/v1alpha4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">nodes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">role&lt;/span>: &lt;span style="color:#ae81ff">control-plane&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kubeadmConfigPatches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> kind: InitConfiguration
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> nodeRegistration:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> kubeletExtraArgs:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> system-reserved: memory=4Gi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">role&lt;/span>: &lt;span style="color:#ae81ff">worker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">kubeadmConfigPatches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> kind: JoinConfiguration
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> nodeRegistration:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> kubeletExtraArgs:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> system-reserved: memory=4Gi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="create-a-cluster-with-the-configuration-file">Create a cluster with the configuration file&lt;/h3>
&lt;p>Use &lt;code>--config&lt;/code> option to specify the configuration file.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ kind create cluster --name=demo --config=$HOME/kind-config.yaml
Creating cluster &amp;#34;demo&amp;#34; ...
✓ Ensuring node image (kindest/node:v1.19.1)
✓ Preparing nodes
✓ Writing configuration
✓ Starting control-plane &amp;amp;#xfe0f;
✓ Installing CNI
✓ Installing StorageClass
✓ Joining worker nodes
Set kubectl context to &amp;#34;kind-demo&amp;#34;
You can now use your cluster with:
kubectl cluster-info --context kind-demo
Not sure what to do next? Check out &amp;lt;https://kind.sigs.k8s.io/docs/user/quick-start/&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="confirm-the-resource-allocation">Confirm the resource allocation&lt;/h3>
&lt;p>You will see that it is properly allocated with &lt;code>kubectl describe node&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ kubectl get node
NAME STATUS ROLES AGE VERSION
demo-control-plane Ready master 76s v1.19.1
demo-worker Ready &amp;lt;none&amp;gt; 41s v1.19.1
$ kubectl describe node demo-control-plane
Name: demo-control-plane
[...]
Allocatable:
cpu: 4
ephemeral-storage: 61255492Ki
hugepages-1Gi: 0
hugepages-2Mi: 0
memory: 3958900Ki
pods: 110
[...]
$ kubectl describe node demo-worker
Name: demo-worker
[...]
Allocatable:
cpu: 4
ephemeral-storage: 61255492Ki
hugepages-1Gi: 0
hugepages-2Mi: 0
memory: 3958900Ki
pods: 110
&lt;/code>&lt;/pre></description></item></channel></rss>